/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/node-ical";
exports.ids = ["vendor-chunks/node-ical"];
exports.modules = {

/***/ "(ssr)/./node_modules/node-ical/ical.js":
/*!****************************************!*\
  !*** ./node_modules/node-ical/ical.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint-disable max-depth, max-params, no-warning-comments, complexity */\n\nconst {v4: uuid} = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/uuid/dist/esm-node/index.js\");\nconst moment = __webpack_require__(/*! moment-timezone */ \"(ssr)/./node_modules/moment-timezone/index.js\");\nconst rrule = (__webpack_require__(/*! rrule */ \"(ssr)/./node_modules/rrule/dist/es5/rrule.js\").RRule);\n\n/** **************\n *  A tolerant, minimal icalendar parser\n *  (http://tools.ietf.org/html/rfc5545)\n *\n *  <peterbraden@peterbraden.co.uk>\n * ************* */\n\n// Unescape Text re RFC 4.3.11\nconst text = function (t = '') {\n  return t\n    .replace(/\\\\,/g, ',')\n    .replace(/\\\\;/g, ';')\n    .replace(/\\\\[nN]/g, '\\n')\n    .replace(/\\\\\\\\/g, '\\\\');\n};\n\nconst parseValue = function (value) {\n  if (value === 'TRUE') {\n    return true;\n  }\n\n  if (value === 'FALSE') {\n    return false;\n  }\n\n  const number = Number(value);\n  if (!Number.isNaN(number)) {\n    return number;\n  }\n\n  return value;\n};\n\nconst parseParameters = function (p) {\n  const out = {};\n  for (const element of p) {\n    if (element.includes('=')) {\n      const segs = element.split('=');\n\n      out[segs[0]] = parseValue(segs.slice(1).join('='));\n    }\n  }\n\n  // Sp is not defined in this scope, typo?\n  // original code from peterbraden\n  // return out || sp;\n  return out;\n};\n\nconst storeValueParameter = function (name) {\n  return function (value, curr) {\n    const current = curr[name];\n\n    if (Array.isArray(current)) {\n      current.push(value);\n      return curr;\n    }\n\n    if (typeof current === 'undefined') {\n      curr[name] = value;\n    } else {\n      curr[name] = [current, value];\n    }\n\n    return curr;\n  };\n};\n\nconst storeParameter = function (name) {\n  return function (value, parameters, curr) {\n    const data = parameters && parameters.length > 0 && !(parameters.length === 1 && (parameters[0] === 'CHARSET=utf-8' || parameters[0] === 'VALUE=TEXT')) ? {params: parseParameters(parameters), val: text(value)} : text(value);\n\n    return storeValueParameter(name)(data, curr);\n  };\n};\n\nconst addTZ = function (dt, parameters) {\n  const p = parseParameters(parameters);\n\n  if (dt.tz) {\n    // Date already has a timezone property\n    return dt;\n  }\n\n  if (parameters && p && dt) {\n    dt.tz = p.TZID;\n    if (dt.tz !== undefined) {\n      // Remove surrounding quotes if found at the beginning and at the end of the string\n      // (Occurs when parsing Microsoft Exchange events containing TZID with Windows standard format instead IANA)\n      dt.tz = dt.tz.replace(/^\"(.*)\"$/, '$1');\n    }\n  }\n\n  return dt;\n};\n\nlet zoneTable = null;\nfunction getIanaTZFromMS(msTZName) {\n  if (!zoneTable) {\n    zoneTable = __webpack_require__(/*! ./windowsZones.json */ \"(ssr)/./node_modules/node-ical/windowsZones.json\");\n  }\n\n  // Get hash entry\n  const he = zoneTable[msTZName];\n  // If found return iana name, else null\n  return he ? he.iana[0] : null;\n}\n\nfunction getTimeZone(value) {\n  let tz = value;\n  let found = '';\n  // If this is the custom timezone from MS Outlook\n  if (tz === 'tzone://Microsoft/Custom' || tz.startsWith('Customized Time Zone') || tz.startsWith('tzone://Microsoft/')) {\n    // Set it to the local timezone, because we can't tell\n    tz = moment.tz.guess();\n  }\n\n  // Remove quotes if found\n  tz = tz.replace(/^\"(.*)\"$/, '$1');\n\n  // Watch out for windows timezones\n  if (tz && tz.includes(' ')) {\n    const tz1 = getIanaTZFromMS(tz);\n    if (tz1) {\n      tz = tz1;\n    }\n  }\n\n  // Watch out for offset timezones\n  // If the conversion above didn't find any matching IANA tz\n  // And offset is still present\n  if (tz && tz.startsWith('(')) {\n    // Extract just the offset\n    const regex = /[+|-]\\d*:\\d*/;\n    tz = null;\n    found = tz.match(regex);\n  }\n\n  // Timezone not confirmed yet\n  if (found === '') {\n    // Lookup tz\n    found = moment.tz.names().find(zone => {\n      return zone === tz;\n    });\n  }\n\n  return found === '' ? tz : found;\n}\n\nfunction isDateOnly(value, parameters) {\n  const dateOnly = ((parameters && parameters.includes('VALUE=DATE') && !parameters.includes('VALUE=DATE-TIME')) || /^\\d{8}$/.test(value) === true);\n  return dateOnly;\n}\n\nconst typeParameter = function (name) {\n  // Typename is not used in this function?\n  return function (value, parameters, curr) {\n    const returnValue = isDateOnly(value, parameters) ? 'date' : 'date-time';\n    return storeValueParameter(name)(returnValue, curr);\n  };\n};\n\nconst dateParameter = function (name) {\n  return function (value, parameters, curr, stack) {\n    // The regex from main gets confused by extra :\n    const pi = parameters.indexOf('TZID=tzone');\n    if (pi >= 0) {\n      // Correct the parameters with the part on the value\n      parameters[pi] = parameters[pi] + ':' + value.split(':')[0];\n      // Get the date from the field, other code uses the value parameter\n      value = value.split(':')[1];\n    }\n\n    let newDate = text(value);\n\n    // Process 'VALUE=DATE' and EXDATE\n    if (isDateOnly(value, parameters)) {\n      // Just Date\n\n      const comps = /^(\\d{4})(\\d{2})(\\d{2}).*$/.exec(value);\n      if (comps !== null) {\n        // No TZ info - assume same timezone as this computer\n        newDate = new Date(comps[1], Number.parseInt(comps[2], 10) - 1, comps[3]);\n\n        newDate.dateOnly = true;\n\n        // Store as string - worst case scenario\n        return storeValueParameter(name)(newDate, curr);\n      }\n    }\n\n    // Typical RFC date-time format\n    const comps = /^(\\d{4})(\\d{2})(\\d{2})T(\\d{2})(\\d{2})(\\d{2})(Z)?$/.exec(value);\n    if (comps !== null) {\n      if (comps[7] === 'Z') {\n        // GMT\n        newDate = new Date(\n          Date.UTC(\n            Number.parseInt(comps[1], 10),\n            Number.parseInt(comps[2], 10) - 1,\n            Number.parseInt(comps[3], 10),\n            Number.parseInt(comps[4], 10),\n            Number.parseInt(comps[5], 10),\n            Number.parseInt(comps[6], 10)\n          )\n        );\n        newDate.tz = 'Etc/UTC';\n      } else if (parameters && parameters[0] && parameters[0].includes('TZID=') && parameters[0].split('=')[1]) {\n        // Get the timezone from the parameters TZID value\n        let tz = parameters[0].split('=')[1];\n        let found = '';\n        let offset = '';\n\n        // If this is the custom timezone from MS Outlook\n        if (tz === 'tzone://Microsoft/Custom' || tz === '(no TZ description)' || tz.startsWith('Customized Time Zone') || tz.startsWith('tzone://Microsoft/')) {\n          // Set it to the local timezone, because we can't tell\n          tz = moment.tz.guess();\n          parameters[0] = 'TZID=' + tz;\n        }\n\n        // Remove quotes if found\n        tz = tz.replace(/^\"(.*)\"$/, '$1');\n\n        // Watch out for windows timezones\n        if (tz && tz.includes(' ')) {\n          const tz1 = getIanaTZFromMS(tz);\n          if (tz1) {\n            tz = tz1;\n            // We have a confirmed timezone, don't use offset, may confuse DST/STD time\n            offset = '';\n          }\n        }\n\n        // Watch out for offset timezones\n        // If the conversion above didn't find any matching IANA tz\n        // And offset is still present\n        if (tz && tz.startsWith('(')) {\n          // Extract just the offset\n          const regex = /[+|-]\\d*:\\d*/;\n          offset = tz.match(regex);\n          tz = null;\n          found = offset;\n        }\n\n        // Timezone not confirmed yet\n        if (found === '') {\n          // Lookup tz\n          found = moment.tz.names().find(zone => {\n            return zone === tz;\n          });\n        }\n\n        // Timezone confirmed or forced to offset\n        newDate = found ? moment.tz(value, 'YYYYMMDDTHHmmss' + offset, tz).toDate() : new Date(\n          Number.parseInt(comps[1], 10),\n          Number.parseInt(comps[2], 10) - 1,\n          Number.parseInt(comps[3], 10),\n          Number.parseInt(comps[4], 10),\n          Number.parseInt(comps[5], 10),\n          Number.parseInt(comps[6], 10)\n        );\n\n        newDate = addTZ(newDate, parameters);\n      } else {\n        // Get the time zone from the stack\n        const stackItemWithTimeZone =\n          (stack || []).find(item => {\n            return Object.values(item).find(subItem => subItem.type === 'VTIMEZONE');\n          }) || {};\n        const vTimezone =\n          Object.values(stackItemWithTimeZone).find(({type}) => type === 'VTIMEZONE');\n\n        newDate = vTimezone && moment.tz.zone(vTimezone.tzid) ?\n          moment.tz(value, 'YYYYMMDDTHHmmss', vTimezone.tzid).toDate() :\n          new Date(\n            Number.parseInt(comps[1], 10),\n            Number.parseInt(comps[2], 10) - 1,\n            Number.parseInt(comps[3], 10),\n            Number.parseInt(comps[4], 10),\n            Number.parseInt(comps[5], 10),\n            Number.parseInt(comps[6], 10)\n          );\n      }\n    }\n\n    // Store as string - worst case scenario\n    return storeValueParameter(name)(newDate, curr);\n  };\n};\n\nconst geoParameter = function (name) {\n  return function (value, parameters, curr) {\n    storeParameter(value, parameters, curr);\n    const parts = value.split(';');\n    curr[name] = {lat: Number(parts[0]), lon: Number(parts[1])};\n    return curr;\n  };\n};\n\nconst categoriesParameter = function (name) {\n  const separatorPattern = /\\s*,\\s*/g;\n  return function (value, parameters, curr) {\n    storeParameter(value, parameters, curr);\n    if (curr[name] === undefined) {\n      curr[name] = value ? value.split(separatorPattern) : [];\n    } else if (value) {\n      curr[name] = curr[name].concat(value.split(separatorPattern));\n    }\n\n    return curr;\n  };\n};\n\n// EXDATE is an entry that represents exceptions to a recurrence rule (ex: \"repeat every day except on 7/4\").\n// The EXDATE entry itself can also contain a comma-separated list, so we make sure to parse each date out separately.\n// There can also be more than one EXDATE entries in a calendar record.\n// Since there can be multiple dates, we create an array of them.  The index into the array is the ISO string of the date itself, for ease of use.\n// i.e. You can check if ((curr.exdate != undefined) && (curr.exdate[date iso string] != undefined)) to see if a date is an exception.\n// NOTE: This specifically uses date only, and not time.  This is to avoid a few problems:\n//    1. The ISO string with time wouldn't work for \"floating dates\" (dates without timezones).\n//       ex: \"20171225T060000\" - this is supposed to mean 6 AM in whatever timezone you're currently in\n//    2. Daylight savings time potentially affects the time you would need to look up\n//    3. Some EXDATE entries in the wild seem to have times different from the recurrence rule, but are still excluded by calendar programs.  Not sure how or why.\n//       These would fail any sort of sane time lookup, because the time literally doesn't match the event.  So we'll ignore time and just use date.\n//       ex: DTSTART:20170814T140000Z\n//             RRULE:FREQ=WEEKLY;WKST=SU;INTERVAL=2;BYDAY=MO,TU\n//             EXDATE:20171219T060000\n//       Even though \"T060000\" doesn't match or overlap \"T1400000Z\", it's still supposed to be excluded?  Odd. :(\n// TODO: See if this causes any problems with events that recur multiple times a day.\nconst exdateParameter = function (name) {\n  return function (value, parameters, curr) {\n    const separatorPattern = /\\s*,\\s*/g;\n    curr[name] = curr[name] || [];\n    const dates = value ? value.split(separatorPattern) : [];\n    for (const entry of dates) {\n      const exdate = [];\n      dateParameter(name)(entry, parameters, exdate);\n\n      if (exdate[name]) {\n        if (typeof exdate[name].toISOString === 'function') {\n          curr[name][exdate[name].toISOString().slice(0, 10)] = exdate[name];\n        } else {\n          throw new TypeError('No toISOString function in exdate[name]', exdate[name]);\n        }\n      }\n    }\n\n    return curr;\n  };\n};\n\n// RECURRENCE-ID is the ID of a specific recurrence within a recurrence rule.\n// TODO:  It's also possible for it to have a range, like \"THISANDPRIOR\", \"THISANDFUTURE\".  This isn't currently handled.\nconst recurrenceParameter = function (name) {\n  return dateParameter(name);\n};\n\nconst addFBType = function (fb, parameters) {\n  const p = parseParameters(parameters);\n\n  if (parameters && p) {\n    fb.type = p.FBTYPE || 'BUSY';\n  }\n\n  return fb;\n};\n\nconst freebusyParameter = function (name) {\n  return function (value, parameters, curr) {\n    const fb = addFBType({}, parameters);\n    curr[name] = curr[name] || [];\n    curr[name].push(fb);\n\n    storeParameter(value, parameters, fb);\n\n    const parts = value.split('/');\n\n    for (const [index, name] of ['start', 'end'].entries()) {\n      dateParameter(name)(parts[index], parameters, fb);\n    }\n\n    return curr;\n  };\n};\n\nmodule.exports = {\n  objectHandlers: {\n    BEGIN(component, parameters, curr, stack) {\n      stack.push(curr);\n\n      return {type: component, params: parameters};\n    },\n    END(value, parameters, curr, stack) {\n      // Original end function\n      const originalEnd = function (component, parameters_, curr, stack) {\n        // Prevents the need to search the root of the tree for the VCALENDAR object\n        if (component === 'VCALENDAR') {\n          // Scan all high level object in curr and drop all strings\n          let key;\n          let object;\n          const highLevel = {};\n\n          for (key in curr) {\n            if (!{}.hasOwnProperty.call(curr, key)) {\n              continue;\n            }\n\n            object = curr[key];\n            if (typeof object === 'string') {\n              highLevel[key] = object;\n              delete curr[key];\n            }\n          }\n\n          if (highLevel.type) {\n            curr[highLevel.type.toLowerCase()] = highLevel;\n          }\n\n          return curr;\n        }\n\n        const par = stack.pop();\n\n        if (!curr.end) { // RFC5545, 3.6.1\n          if (curr.datetype === 'date-time') {\n            curr.end = new Date(curr.start.getTime());\n            // If the duration is not set\n          } else if (curr.duration === undefined) {\n            // Set the end to the start plus one day RFC5545, 3.6.1\n            curr.end = moment.utc(curr.start).add(1, 'days').toDate(); // New Date(moment(curr.start).add(1, 'days'));\n          } else {\n            const durationUnits =\n              {\n                // Y: 'years',\n                // M: 'months',\n                W: 'weeks',\n                D: 'days',\n                H: 'hours',\n                M: 'minutes',\n                S: 'seconds'\n              };\n            // Get the list of duration elements\n            const r = curr.duration.match(/-?\\d+[YMWDHS]/g);\n            let newend = moment.utc(curr.start);\n            // Is the 1st character a negative sign?\n            const indicator = curr.duration.startsWith('-') ? -1 : 1;\n            // Process each element\n            for (const d of r) {\n              newend = newend.add(Number.parseInt(d, 10) * indicator, durationUnits[d.slice(-1)]);\n            }\n\n            curr.end = newend.toDate();\n          }\n        }\n\n        if (curr.uid) {\n          // If this is the first time we run into this UID, just save it.\n          if (par[curr.uid] === undefined) {\n            par[curr.uid] = curr;\n\n            if (par.method) { // RFC5545, 3.2\n              par[curr.uid].method = par.method;\n            }\n          } else if (curr.recurrenceid === undefined) {\n            // If we have multiple ical entries with the same UID, it's either going to be a\n            // modification to a recurrence (RECURRENCE-ID), and/or a significant modification\n            // to the entry (SEQUENCE).\n\n            // TODO: Look into proper sequence logic.\n\n            // If we have the same UID as an existing record, and it *isn't* a specific recurrence ID,\n            // not quite sure what the correct behaviour should be.  For now, just take the new information\n            // and merge it with the old record by overwriting only the fields that appear in the new record.\n            let key;\n            for (key in curr) {\n              if (key !== null) {\n                par[curr.uid][key] = curr[key];\n              }\n            }\n          }\n\n          // If we have recurrence-id entries, list them as an array of recurrences keyed off of recurrence-id.\n          // To use - as you're running through the dates of an rrule, you can try looking it up in the recurrences\n          // array.  If it exists, then use the data from the calendar object in the recurrence instead of the parent\n          // for that day.\n\n          // NOTE:  Sometimes the RECURRENCE-ID record will show up *before* the record with the RRULE entry.  In that\n          // case, what happens is that the RECURRENCE-ID record ends up becoming both the parent record and an entry\n          // in the recurrences array, and then when we process the RRULE entry later it overwrites the appropriate\n          // fields in the parent record.\n\n          if (typeof curr.recurrenceid !== 'undefined') {\n            // TODO:  Is there ever a case where we have to worry about overwriting an existing entry here?\n\n            // Create a copy of the current object to save in our recurrences array.  (We *could* just do par = curr,\n            // except for the case that we get the RECURRENCE-ID record before the RRULE record.  In that case, we\n            // would end up with a shared reference that would cause us to overwrite *both* records at the point\n            // that we try and fix up the parent record.)\n            const recurrenceObject = {};\n            let key;\n            for (key in curr) {\n              if (key !== null) {\n                recurrenceObject[key] = curr[key];\n              }\n            }\n\n            if (typeof recurrenceObject.recurrences !== 'undefined') {\n              delete recurrenceObject.recurrences;\n            }\n\n            // If we don't have an array to store recurrences in yet, create it.\n            if (par[curr.uid].recurrences === undefined) {\n              par[curr.uid].recurrences = {};\n            }\n\n            // Save off our cloned recurrence object into the array, keyed by date but not time.\n            // We key by date only to avoid timezone and \"floating time\" problems (where the time isn't associated with a timezone).\n            // TODO: See if this causes a problem with events that have multiple recurrences per day.\n            if (typeof curr.recurrenceid.toISOString === 'function') {\n              par[curr.uid].recurrences[curr.recurrenceid.toISOString().slice(0, 10)] = recurrenceObject;\n            } else { // Removed issue 56\n              throw new TypeError('No toISOString function in curr.recurrenceid', curr.recurrenceid);\n            }\n          }\n\n          // One more specific fix - in the case that an RRULE entry shows up after a RECURRENCE-ID entry,\n          // let's make sure to clear the recurrenceid off the parent field.\n          if (typeof par[curr.uid].rrule !== 'undefined' && typeof par[curr.uid].recurrenceid !== 'undefined') {\n            delete par[curr.uid].recurrenceid;\n          }\n        } else {\n          const id = uuid();\n          par[id] = curr;\n\n          if (par.method) { // RFC5545, 3.2\n            par[id].method = par.method;\n          }\n        }\n\n        return par;\n      };\n\n      // Recurrence rules are only valid for VEVENT, VTODO, and VJOURNAL.\n      // More specifically, we need to filter the VCALENDAR type because we might end up with a defined rrule\n      // due to the subtypes.\n\n      if ((value === 'VEVENT' || value === 'VTODO' || value === 'VJOURNAL') && curr.rrule) {\n        let rule = curr.rrule.replace('RRULE:', '');\n        // Make sure the rrule starts with FREQ=\n        rule = rule.slice(rule.lastIndexOf('FREQ='));\n        // If no rule start date\n        if (rule.includes('DTSTART') === false) {\n          // Get date/time into a specific format for comapare\n          let x = moment(curr.start).format('MMMM/Do/YYYY, h:mm:ss a');\n          // If the local time value is midnight\n          // This a whole day event\n          if (x.slice(-11) === '12:00:00 am') {\n            // Get the timezone offset\n            // The internal date is stored in UTC format\n            const offset = curr.start.getTimezoneOffset();\n            // Only east of gmt is a problem\n            if (offset < 0) {\n              // Calculate the new startdate with the offset applied, bypass RRULE/Luxon confusion\n              // Make the internally stored DATE the actual date (not UTC offseted)\n              // Luxon expects local time, not utc, so gets start date wrong if not adjusted\n              curr.start = new Date(curr.start.getTime() + (Math.abs(offset) * 60000));\n            } else {\n              // Get rid of any time (shouldn't be any, but be sure)\n              x = moment(curr.start).format('MMMM/Do/YYYY');\n              const comps = /^(\\d{2})\\/(\\d{2})\\/(\\d{4})/.exec(x);\n              if (comps) {\n                curr.start = new Date(comps[3], comps[1] - 1, comps[2]);\n              }\n            }\n          }\n\n          // If the date has an toISOString function\n          if (curr.start && typeof curr.start.toISOString === 'function') {\n            try {\n              // If the original date has a TZID, add it\n              if (curr.start.tz) {\n                const tz = getTimeZone(curr.start.tz);\n                rule += `;DTSTART;TZID=${tz}:${curr.start.toISOString().replace(/[-:]/g, '')}`;\n              } else {\n                rule += `;DTSTART=${curr.start.toISOString().replace(/[-:]/g, '')}`;\n              }\n\n              rule = rule.replace(/\\.\\d{3}/, '');\n            } catch (error) { // This should not happen, issue #56\n              throw new Error('ERROR when trying to convert to ISOString', error);\n            }\n          } else {\n            throw new Error('No toISOString function in curr.start', curr.start);\n          }\n        }\n\n        // Make sure to catch error from rrule.fromString()\n        try {\n          curr.rrule = rrule.fromString(rule);\n        } catch (error) {\n          throw error;\n        }\n      }\n\n      return originalEnd.call(this, value, parameters, curr, stack);\n    },\n    SUMMARY: storeParameter('summary'),\n    DESCRIPTION: storeParameter('description'),\n    URL: storeParameter('url'),\n    UID: storeParameter('uid'),\n    LOCATION: storeParameter('location'),\n    DTSTART(value, parameters, curr, stack) {\n      curr = dateParameter('start')(value, parameters, curr, stack);\n      return typeParameter('datetype')(value, parameters, curr);\n    },\n    DTEND: dateParameter('end'),\n    EXDATE: exdateParameter('exdate'),\n    ' CLASS': storeParameter('class'), // Should there be a space in this property?\n    TRANSP: storeParameter('transparency'),\n    GEO: geoParameter('geo'),\n    'PERCENT-COMPLETE': storeParameter('completion'),\n    COMPLETED: dateParameter('completed'),\n    CATEGORIES: categoriesParameter('categories'),\n    FREEBUSY: freebusyParameter('freebusy'),\n    DTSTAMP: dateParameter('dtstamp'),\n    CREATED: dateParameter('created'),\n    'LAST-MODIFIED': dateParameter('lastmodified'),\n    'RECURRENCE-ID': recurrenceParameter('recurrenceid'),\n    RRULE(value, parameters, curr, stack, line) {\n      curr.rrule = line;\n      return curr;\n    }\n  },\n\n  handleObject(name, value, parameters, ctx, stack, line) {\n    if (this.objectHandlers[name]) {\n      return this.objectHandlers[name](value, parameters, ctx, stack, line);\n    }\n\n    // Handling custom properties\n    if (/X-[\\w-]+/.test(name) && stack.length > 0) {\n      // Trimming the leading and perform storeParam\n      name = name.slice(2);\n      return storeParameter(name)(value, parameters, ctx, stack, line);\n    }\n\n    return storeParameter(name.toLowerCase())(value, parameters, ctx);\n  },\n\n  parseLines(lines, limit, ctx, stack, lastIndex, cb) {\n    if (!cb && typeof ctx === 'function') {\n      cb = ctx;\n      ctx = undefined;\n    }\n\n    ctx = ctx || {};\n    stack = stack || [];\n\n    let limitCounter = 0;\n\n    let i = lastIndex || 0;\n    for (let ii = lines.length; i < ii; i++) {\n      let l = lines[i];\n      // Unfold : RFC#3.1\n      while (lines[i + 1] && /[ \\t]/.test(lines[i + 1][0])) {\n        l += lines[i + 1].slice(1);\n        i++;\n      }\n\n      // Remove any double quotes in any tzid statement// except around (utc+hh:mm\n      if (l.indexOf('TZID=') && !l.includes('\"(')) {\n        l = l.replace(/\"/g, '');\n      }\n\n      const exp = /^([\\w\\d-]+)((?:;[\\w\\d-]+=(?:(?:\"[^\"]*\")|[^\":;]+))*):(.*)$/;\n      let kv = l.match(exp);\n\n      if (kv === null) {\n        // Invalid line - must have k&v\n        continue;\n      }\n\n      kv = kv.slice(1);\n\n      const value = kv[kv.length - 1];\n      const name = kv[0];\n      const parameters = kv[1] ? kv[1].split(';').slice(1) : [];\n\n      ctx = this.handleObject(name, value, parameters, ctx, stack, l) || {};\n      if (++limitCounter > limit) {\n        break;\n      }\n    }\n\n    if (i >= lines.length) {\n      // Type and params are added to the list of items, get rid of them.\n      delete ctx.type;\n      delete ctx.params;\n    }\n\n    if (cb) {\n      if (i < lines.length) {\n        setImmediate(() => {\n          this.parseLines(lines, limit, ctx, stack, i + 1, cb);\n        });\n      } else {\n        setImmediate(() => {\n          cb(null, ctx);\n        });\n      }\n    } else {\n      return ctx;\n    }\n  },\n\n  parseICS(string, cb) {\n    const lines = string.split(/\\r?\\n/);\n    let ctx;\n\n    if (cb) {\n      // Asynchronous execution\n      this.parseLines(lines, 2000, cb);\n    } else {\n      // Synchronous execution\n      ctx = this.parseLines(lines, lines.length);\n      return ctx;\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-ical/ical.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-ical/node-ical.js":
/*!*********************************************!*\
  !*** ./node_modules/node-ical/node-ical.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const fs = __webpack_require__(/*! fs */ \"fs\");\nconst axios = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/dist/node/axios.cjs\");\nconst ical = __webpack_require__(/*! ./ical.js */ \"(ssr)/./node_modules/node-ical/ical.js\");\n\n/**\n * ICal event object.\n *\n * These two fields are always present:\n *  - type\n *  - params\n *\n * The rest of the fields may or may not be present depending on the input.\n * Do not assume any of these fields are valid and check them before using.\n * Most types are simply there as a general guide for IDEs and users.\n *\n * @typedef iCalEvent\n * @type {object}\n *\n * @property {string} type           - Type of event.\n * @property {Array} params          - Extra event parameters.\n *\n * @property {?object} start         - When this event starts.\n * @property {?object} end           - When this event ends.\n *\n * @property {?string} summary       - Event summary string.\n * @property {?string} description   - Event description.\n *\n * @property {?object} dtstamp       - DTSTAMP field of this event.\n *\n * @property {?object} created       - When this event was created.\n * @property {?object} lastmodified  - When this event was last modified.\n *\n * @property {?string} uid           - Unique event identifier.\n *\n * @property {?string} status        - Event status.\n *\n * @property {?string} sequence      - Event sequence.\n *\n * @property {?string} url           - URL of this event.\n *\n * @property {?string} location      - Where this event occurs.\n * @property {?{\n *     lat: number, lon: number\n * }} geo                            - Lat/lon location of this event.\n *\n * @property {?Array.<string>}       - Array of event catagories.\n */\n/**\n * Object containing iCal events.\n * @typedef {Object.<string, iCalEvent>} iCalData\n */\n/**\n * Callback for iCal parsing functions with error and iCal data as a JavaScript object.\n * @callback icsCallback\n * @param {Error} err\n * @param {iCalData} ics\n */\n/**\n * A Promise that is undefined if a compatible callback is passed.\n * @typedef {(Promise.<iCalData>|undefined)} optionalPromise\n */\n\n// utility to allow callbacks to be used for promises\nfunction promiseCallback(fn, cb) {\n  const promise = new Promise(fn);\n  if (!cb) {\n    return promise;\n  }\n\n  promise\n    .then(returnValue => {\n      cb(null, returnValue);\n    })\n    .catch(error => {\n      cb(error, null);\n    });\n}\n\n// Sync functions\nconst sync = {};\n// Async functions\nconst async = {};\n// Auto-detect functions for backwards compatibility.\nconst autodetect = {};\n\n/**\n * Download an iCal file from the web and parse it.\n *\n * @param {string} url                - URL of file to request.\n * @param {Object|icsCallback} [opts] - Options to pass to axios.get() from npm:axios.\n *                                      Alternatively you can pass the callback function directly.\n *                                      If no callback is provided a promise will be returned.\n * @param {icsCallback} [cb]          - Callback function.\n *                                      If no callback is provided a promise will be returned.\n *\n * @returns {optionalPromise} Promise is returned if no callback is passed.\n */\nasync.fromURL = function (url, options, cb) {\n  return promiseCallback((resolve, reject) => {\n    axios.get(url, options)\n      .then(response => {\n        // If (response.status !== 200) {\n        // all ok status codes should be accepted (any 2XX code)\n        if (Math.floor(response.status / 100) !== 2) {\n          reject(new Error(`${response.status} ${response.statusText}`));\n          return;\n        }\n\n        return response.data;\n      })\n      .then(data => {\n        ical.parseICS(data, (error, ics) => {\n          if (error) {\n            reject(error);\n            return;\n          }\n\n          resolve(ics);\n        });\n      })\n      .catch(error => {\n        reject(error);\n      });\n  }, cb);\n};\n\n/**\n * Load iCal data from a file and parse it.\n *\n * @param {string} filename   - File path to load.\n * @param {icsCallback} [cb]  - Callback function.\n *                              If no callback is provided a promise will be returned.\n *\n * @returns {optionalPromise} Promise is returned if no callback is passed.\n */\nasync.parseFile = function (filename, cb) {\n  return promiseCallback((resolve, reject) => {\n    fs.readFile(filename, 'utf8', (error, data) => {\n      if (error) {\n        reject(error);\n        return;\n      }\n\n      ical.parseICS(data, (error, ics) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        resolve(ics);\n      });\n    });\n  }, cb);\n};\n\n/**\n * Parse iCal data from a string.\n *\n * @param {string} data       - String containing iCal data.\n * @param {icsCallback} [cb]  - Callback function.\n *                              If no callback is provided a promise will be returned.\n *\n * @returns {optionalPromise} Promise is returned if no callback is passed.\n */\nasync.parseICS = function (data, cb) {\n  return promiseCallback((resolve, reject) => {\n    ical.parseICS(data, (error, ics) => {\n      if (error) {\n        reject(error);\n        return;\n      }\n\n      resolve(ics);\n    });\n  }, cb);\n};\n\n/**\n * Load iCal data from a file and parse it.\n *\n * @param {string} filename   - File path to load.\n *\n * @returns {iCalData} Parsed iCal data.\n */\nsync.parseFile = function (filename) {\n  const data = fs.readFileSync(filename, 'utf8');\n  return ical.parseICS(data);\n};\n\n/**\n * Parse iCal data from a string.\n *\n * @param {string} data - String containing iCal data.\n *\n * @returns {iCalData} Parsed iCal data.\n */\nsync.parseICS = function (data) {\n  return ical.parseICS(data);\n};\n\n/**\n * Load iCal data from a file and parse it.\n *\n * @param {string} filename   - File path to load.\n * @param {icsCallback} [cb]  - Callback function.\n *                              If no callback is provided this function runs synchronously.\n *\n * @returns {iCalData|undefined} Parsed iCal data or undefined if a callback is being used.\n */\nautodetect.parseFile = function (filename, cb) {\n  if (!cb) {\n    return sync.parseFile(filename);\n  }\n\n  async.parseFile(filename, cb);\n};\n\n/**\n * Parse iCal data from a string.\n *\n * @param {string} data       - String containing iCal data.\n * @param {icsCallback} [cb]  - Callback function.\n *                              If no callback is provided this function runs synchronously.\n *\n * @returns {iCalData|undefined} Parsed iCal data or undefined if a callback is being used.\n */\nautodetect.parseICS = function (data, cb) {\n  if (!cb) {\n    return sync.parseICS(data);\n  }\n\n  async.parseICS(data, cb);\n};\n\n// Export api functions\nmodule.exports = {\n  // Autodetect\n  fromURL: async.fromURL,\n  parseFile: autodetect.parseFile,\n  parseICS: autodetect.parseICS,\n  // Sync\n  sync,\n  // Async\n  async,\n  // Other backwards compat things\n  objectHandlers: ical.objectHandlers,\n  handleObject: ical.handleObject,\n  parseLines: ical.parseLines\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-ical/node-ical.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-ical/windowsZones.json":
/*!**************************************************!*\
  !*** ./node_modules/node-ical/windowsZones.json ***!
  \**************************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"Dateline Standard Time":{"iana":["Etc/GMT+12"]},"UTC-11":{"iana":["Etc/GMT+11"]},"Aleutian Standard Time":{"iana":["America/Adak"]},"Hawaiian Standard Time":{"iana":["Pacific/Honolulu"]},"Marquesas Standard Time":{"iana":["Pacific/Marquesas"]},"Alaskan Standard Time":{"iana":["America/Anchorage"]},"UTC-09":{"iana":["Etc/GMT+9"]},"Pacific Standard Time (Mexico)":{"iana":["America/Tijuana"]},"UTC-08":{"iana":["Etc/GMT+8"]},"Pacific Standard Time":{"iana":["America/Los_Angeles"]},"US Mountain Standard Time":{"iana":["America/Phoenix"]},"Mountain Standard Time (Mexico)":{"iana":["America/Mazatlan"]},"Mountain Standard Time":{"iana":["America/Denver"]},"Yukon Standard Time":{"iana":["America/Whitehorse"]},"Central America Standard Time":{"iana":["America/Guatemala"]},"Central Standard Time":{"iana":["America/Chicago"]},"Easter Island Standard Time":{"iana":["Pacific/Easter"]},"Central Standard Time (Mexico)":{"iana":["America/Mexico_City"]},"Canada Central Standard Time":{"iana":["America/Regina"]},"SA Pacific Standard Time":{"iana":["America/Bogota"]},"Eastern Standard Time (Mexico)":{"iana":["America/Cancun"]},"Eastern Standard Time":{"iana":["America/New_York"]},"Haiti Standard Time":{"iana":["America/Port-au-Prince"]},"Cuba Standard Time":{"iana":["America/Havana"]},"US Eastern Standard Time":{"iana":["America/Indianapolis"]},"Turks And Caicos Standard Time":{"iana":["America/Grand_Turk"]},"Paraguay Standard Time":{"iana":["America/Asuncion"]},"Atlantic Standard Time":{"iana":["America/Halifax"]},"Venezuela Standard Time":{"iana":["America/Caracas"]},"Central Brazilian Standard Time":{"iana":["America/Cuiaba"]},"SA Western Standard Time":{"iana":["America/La_Paz"]},"Pacific SA Standard Time":{"iana":["America/Santiago"]},"Newfoundland Standard Time":{"iana":["America/St_Johns"]},"Tocantins Standard Time":{"iana":["America/Araguaina"]},"E. South America Standard Time":{"iana":["America/Sao_Paulo"]},"SA Eastern Standard Time":{"iana":["America/Cayenne"]},"Argentina Standard Time":{"iana":["America/Buenos_Aires"]},"Greenland Standard Time":{"iana":["America/Godthab"]},"Montevideo Standard Time":{"iana":["America/Montevideo"]},"Magallanes Standard Time":{"iana":["America/Punta_Arenas"]},"Saint Pierre Standard Time":{"iana":["America/Miquelon"]},"Bahia Standard Time":{"iana":["America/Bahia"]},"UTC-02":{"iana":["Etc/GMT+2"]},"Azores Standard Time":{"iana":["Atlantic/Azores"]},"Cape Verde Standard Time":{"iana":["Atlantic/Cape_Verde"]},"UTC":{"iana":["Etc/UTC"]},"GMT Standard Time":{"iana":["Europe/London"]},"Greenwich Standard Time":{"iana":["Atlantic/Reykjavik"]},"Sao Tome Standard Time":{"iana":["Africa/Sao_Tome"]},"Morocco Standard Time":{"iana":["Africa/Casablanca"]},"W. Europe Standard Time":{"iana":["Europe/Berlin"]},"Central Europe Standard Time":{"iana":["Europe/Budapest"]},"Romance Standard Time":{"iana":["Europe/Paris"]},"Central European Standard Time":{"iana":["Europe/Warsaw"]},"W. Central Africa Standard Time":{"iana":["Africa/Lagos"]},"Jordan Standard Time":{"iana":["Asia/Amman"]},"GTB Standard Time":{"iana":["Europe/Bucharest"]},"Middle East Standard Time":{"iana":["Asia/Beirut"]},"Egypt Standard Time":{"iana":["Africa/Cairo"]},"E. Europe Standard Time":{"iana":["Europe/Chisinau"]},"Syria Standard Time":{"iana":["Asia/Damascus"]},"West Bank Standard Time":{"iana":["Asia/Hebron"]},"South Africa Standard Time":{"iana":["Africa/Johannesburg"]},"FLE Standard Time":{"iana":["Europe/Kiev"]},"Israel Standard Time":{"iana":["Asia/Jerusalem"]},"South Sudan Standard Time":{"iana":["Africa/Juba"]},"Kaliningrad Standard Time":{"iana":["Europe/Kaliningrad"]},"Sudan Standard Time":{"iana":["Africa/Khartoum"]},"Libya Standard Time":{"iana":["Africa/Tripoli"]},"Namibia Standard Time":{"iana":["Africa/Windhoek"]},"Arabic Standard Time":{"iana":["Asia/Baghdad"]},"Turkey Standard Time":{"iana":["Europe/Istanbul"]},"Arab Standard Time":{"iana":["Asia/Riyadh"]},"Belarus Standard Time":{"iana":["Europe/Minsk"]},"Russian Standard Time":{"iana":["Europe/Moscow"]},"E. Africa Standard Time":{"iana":["Africa/Nairobi"]},"Iran Standard Time":{"iana":["Asia/Tehran"]},"Arabian Standard Time":{"iana":["Asia/Dubai"]},"Astrakhan Standard Time":{"iana":["Europe/Astrakhan"]},"Azerbaijan Standard Time":{"iana":["Asia/Baku"]},"Russia Time Zone 3":{"iana":["Europe/Samara"]},"Mauritius Standard Time":{"iana":["Indian/Mauritius"]},"Saratov Standard Time":{"iana":["Europe/Saratov"]},"Georgian Standard Time":{"iana":["Asia/Tbilisi"]},"Volgograd Standard Time":{"iana":["Europe/Volgograd"]},"Caucasus Standard Time":{"iana":["Asia/Yerevan"]},"Afghanistan Standard Time":{"iana":["Asia/Kabul"]},"West Asia Standard Time":{"iana":["Asia/Tashkent"]},"Ekaterinburg Standard Time":{"iana":["Asia/Yekaterinburg"]},"Pakistan Standard Time":{"iana":["Asia/Karachi"]},"Qyzylorda Standard Time":{"iana":["Asia/Qyzylorda"]},"India Standard Time":{"iana":["Asia/Calcutta"]},"Sri Lanka Standard Time":{"iana":["Asia/Colombo"]},"Nepal Standard Time":{"iana":["Asia/Katmandu"]},"Central Asia Standard Time":{"iana":["Asia/Almaty"]},"Bangladesh Standard Time":{"iana":["Asia/Dhaka"]},"Omsk Standard Time":{"iana":["Asia/Omsk"]},"Myanmar Standard Time":{"iana":["Asia/Rangoon"]},"SE Asia Standard Time":{"iana":["Asia/Bangkok"]},"Altai Standard Time":{"iana":["Asia/Barnaul"]},"W. Mongolia Standard Time":{"iana":["Asia/Hovd"]},"North Asia Standard Time":{"iana":["Asia/Krasnoyarsk"]},"N. Central Asia Standard Time":{"iana":["Asia/Novosibirsk"]},"Tomsk Standard Time":{"iana":["Asia/Tomsk"]},"China Standard Time":{"iana":["Asia/Shanghai"]},"North Asia East Standard Time":{"iana":["Asia/Irkutsk"]},"Singapore Standard Time":{"iana":["Asia/Singapore"]},"W. Australia Standard Time":{"iana":["Australia/Perth"]},"Taipei Standard Time":{"iana":["Asia/Taipei"]},"Ulaanbaatar Standard Time":{"iana":["Asia/Ulaanbaatar"]},"Aus Central W. Standard Time":{"iana":["Australia/Eucla"]},"Transbaikal Standard Time":{"iana":["Asia/Chita"]},"Tokyo Standard Time":{"iana":["Asia/Tokyo"]},"North Korea Standard Time":{"iana":["Asia/Pyongyang"]},"Korea Standard Time":{"iana":["Asia/Seoul"]},"Yakutsk Standard Time":{"iana":["Asia/Yakutsk"]},"Cen. Australia Standard Time":{"iana":["Australia/Adelaide"]},"AUS Central Standard Time":{"iana":["Australia/Darwin"]},"E. Australia Standard Time":{"iana":["Australia/Brisbane"]},"AUS Eastern Standard Time":{"iana":["Australia/Sydney"]},"West Pacific Standard Time":{"iana":["Pacific/Port_Moresby"]},"Tasmania Standard Time":{"iana":["Australia/Hobart"]},"Vladivostok Standard Time":{"iana":["Asia/Vladivostok"]},"Lord Howe Standard Time":{"iana":["Australia/Lord_Howe"]},"Bougainville Standard Time":{"iana":["Pacific/Bougainville"]},"Russia Time Zone 10":{"iana":["Asia/Srednekolymsk"]},"Magadan Standard Time":{"iana":["Asia/Magadan"]},"Norfolk Standard Time":{"iana":["Pacific/Norfolk"]},"Sakhalin Standard Time":{"iana":["Asia/Sakhalin"]},"Central Pacific Standard Time":{"iana":["Pacific/Guadalcanal"]},"Russia Time Zone 11":{"iana":["Asia/Kamchatka"]},"New Zealand Standard Time":{"iana":["Pacific/Auckland"]},"UTC+12":{"iana":["Etc/GMT-12"]},"Fiji Standard Time":{"iana":["Pacific/Fiji"]},"Chatham Islands Standard Time":{"iana":["Pacific/Chatham"]},"UTC+13":{"iana":["Etc/GMT-13"]},"Tonga Standard Time":{"iana":["Pacific/Tongatapu"]},"Samoa Standard Time":{"iana":["Pacific/Apia"]},"Line Islands Standard Time":{"iana":["Pacific/Kiritimati"]},"(UTC-12:00) International Date Line West":{"iana":["Etc/GMT+12"]},"(UTC-11:00) Midway Island, Samoa":{"iana":["Pacific/Apia"]},"(UTC-10:00) Hawaii":{"iana":["Pacific/Honolulu"]},"(UTC-09:00) Alaska":{"iana":["America/Anchorage"]},"(UTC-08:00) Pacific Time (US & Canada); Tijuana":{"iana":["America/Los_Angeles"]},"(UTC-08:00) Pacific Time (US and Canada); Tijuana":{"iana":["America/Los_Angeles"]},"(UTC-07:00) Mountain Time (US & Canada)":{"iana":["America/Denver"]},"(UTC-07:00) Mountain Time (US and Canada)":{"iana":["America/Denver"]},"(UTC-07:00) Chihuahua, La Paz, Mazatlan":{"iana":[null]},"(UTC-07:00) Arizona":{"iana":["America/Phoenix"]},"(UTC-06:00) Central Time (US & Canada)":{"iana":["America/Chicago"]},"(UTC-06:00) Central Time (US and Canada)":{"iana":["America/Chicago"]},"(UTC-06:00) Saskatchewan":{"iana":["America/Regina"]},"(UTC-06:00) Guadalajara, Mexico City, Monterrey":{"iana":[null]},"(UTC-06:00) Central America":{"iana":["America/Guatemala"]},"(UTC-05:00) Eastern Time (US & Canada)":{"iana":["America/New_York"]},"(UTC-05:00) Eastern Time (US and Canada)":{"iana":["America/New_York"]},"(UTC-05:00) Indiana (East)":{"iana":["America/Indianapolis"]},"(UTC-05:00) Bogota, Lima, Quito":{"iana":["America/Bogota"]},"(UTC-04:00) Atlantic Time (Canada)":{"iana":["America/Halifax"]},"(UTC-04:00) Georgetown, La Paz, San Juan":{"iana":["America/La_Paz"]},"(UTC-04:00) Santiago":{"iana":["America/Santiago"]},"(UTC-03:30) Newfoundland":{"iana":[null]},"(UTC-03:00) Brasilia":{"iana":["America/Sao_Paulo"]},"(UTC-03:00) Georgetown":{"iana":["America/Cayenne"]},"(UTC-03:00) Greenland":{"iana":["America/Godthab"]},"(UTC-02:00) Mid-Atlantic":{"iana":[null]},"(UTC-01:00) Azores":{"iana":["Atlantic/Azores"]},"(UTC-01:00) Cape Verde Islands":{"iana":["Atlantic/Cape_Verde"]},"(UTC) Greenwich Mean Time: Dublin, Edinburgh, Lisbon, London":{"iana":[null]},"(UTC) Monrovia, Reykjavik":{"iana":["Atlantic/Reykjavik"]},"(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague":{"iana":["Europe/Budapest"]},"(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb":{"iana":["Europe/Warsaw"]},"(UTC+01:00) Brussels, Copenhagen, Madrid, Paris":{"iana":["Europe/Paris"]},"(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna":{"iana":["Europe/Berlin"]},"(UTC+01:00) West Central Africa":{"iana":["Africa/Lagos"]},"(UTC+02:00) Minsk":{"iana":["Europe/Chisinau"]},"(UTC+02:00) Cairo":{"iana":["Africa/Cairo"]},"(UTC+02:00) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius":{"iana":["Europe/Kiev"]},"(UTC+02:00) Athens, Bucharest, Istanbul":{"iana":["Europe/Bucharest"]},"(UTC+02:00) Jerusalem":{"iana":["Asia/Jerusalem"]},"(UTC+02:00) Harare, Pretoria":{"iana":["Africa/Johannesburg"]},"(UTC+03:00) Moscow, St. Petersburg, Volgograd":{"iana":["Europe/Moscow"]},"(UTC+03:00) Kuwait, Riyadh":{"iana":["Asia/Riyadh"]},"(UTC+03:00) Nairobi":{"iana":["Africa/Nairobi"]},"(UTC+03:00) Baghdad":{"iana":["Asia/Baghdad"]},"(UTC+03:30) Tehran":{"iana":["Asia/Tehran"]},"(UTC+04:00) Abu Dhabi, Muscat":{"iana":["Asia/Dubai"]},"(UTC+04:00) Baku, Tbilisi, Yerevan":{"iana":["Asia/Yerevan"]},"(UTC+04:30) Kabul":{"iana":[null]},"(UTC+05:00) Ekaterinburg":{"iana":["Asia/Yekaterinburg"]},"(UTC+05:00) Tashkent":{"iana":["Asia/Tashkent"]},"(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi":{"iana":["Asia/Calcutta"]},"(UTC+05:45) Kathmandu":{"iana":["Asia/Katmandu"]},"(UTC+06:00) Astana, Dhaka":{"iana":["Asia/Almaty"]},"(UTC+06:00) Sri Jayawardenepura":{"iana":["Asia/Colombo"]},"(UTC+06:00) Almaty, Novosibirsk":{"iana":["Asia/Novosibirsk"]},"(UTC+06:30) Yangon (Rangoon)":{"iana":["Asia/Rangoon"]},"(UTC+07:00) Bangkok, Hanoi, Jakarta":{"iana":["Asia/Bangkok"]},"(UTC+07:00) Krasnoyarsk":{"iana":["Asia/Krasnoyarsk"]},"(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi":{"iana":["Asia/Shanghai"]},"(UTC+08:00) Kuala Lumpur, Singapore":{"iana":["Asia/Singapore"]},"(UTC+08:00) Taipei":{"iana":["Asia/Taipei"]},"(UTC+08:00) Perth":{"iana":["Australia/Perth"]},"(UTC+08:00) Irkutsk, Ulaanbaatar":{"iana":["Asia/Irkutsk"]},"(UTC+09:00) Seoul":{"iana":["Asia/Seoul"]},"(UTC+09:00) Osaka, Sapporo, Tokyo":{"iana":["Asia/Tokyo"]},"(UTC+09:00) Yakutsk":{"iana":["Asia/Yakutsk"]},"(UTC+09:30) Darwin":{"iana":["Australia/Darwin"]},"(UTC+09:30) Adelaide":{"iana":["Australia/Adelaide"]},"(UTC+10:00) Canberra, Melbourne, Sydney":{"iana":["Australia/Sydney"]},"(GMT+10:00) Canberra, Melbourne, Sydney":{"iana":["Australia/Sydney"]},"(UTC+10:00) Brisbane":{"iana":["Australia/Brisbane"]},"(UTC+10:00) Hobart":{"iana":["Australia/Hobart"]},"(UTC+10:00) Vladivostok":{"iana":["Asia/Vladivostok"]},"(UTC+10:00) Guam, Port Moresby":{"iana":["Pacific/Port_Moresby"]},"(UTC+11:00) Magadan, Solomon Islands, New Caledonia":{"iana":["Pacific/Guadalcanal"]},"(UTC+12:00) Fiji, Kamchatka, Marshall Is.":{"iana":[null]},"(UTC+12:00) Auckland, Wellington":{"iana":["Pacific/Auckland"]},"(UTC+13:00) Nuku\'alofa":{"iana":["Pacific/Tongatapu"]},"(UTC-03:00) Buenos Aires":{"iana":["America/Buenos_Aires"]},"(UTC+02:00) Beirut":{"iana":["Asia/Beirut"]},"(UTC+02:00) Amman":{"iana":["Asia/Amman"]},"(UTC-06:00) Guadalajara, Mexico City, Monterrey - New":{"iana":["America/Mexico_City"]},"(UTC-07:00) Chihuahua, La Paz, Mazatlan - New":{"iana":["America/Mazatlan"]},"(UTC-08:00) Tijuana, Baja California":{"iana":["America/Tijuana"]},"(UTC+02:00) Windhoek":{"iana":["Africa/Windhoek"]},"(UTC+03:00) Tbilisi":{"iana":["Asia/Tbilisi"]},"(UTC-04:00) Manaus":{"iana":["America/Cuiaba"]},"(UTC-03:00) Montevideo":{"iana":["America/Montevideo"]},"(UTC+04:00) Yerevan":{"iana":[null]},"(UTC-04:30) Caracas":{"iana":["America/Caracas"]},"(UTC) Casablanca":{"iana":["Africa/Casablanca"]},"(UTC+05:00) Islamabad, Karachi":{"iana":["Asia/Karachi"]},"(UTC+04:00) Port Louis":{"iana":["Indian/Mauritius"]},"(UTC) Coordinated Universal Time":{"iana":["Etc/UTC"]},"(UTC-04:00) Asuncion":{"iana":["America/Asuncion"]},"(UTC+12:00) Petropavlovsk-Kamchatsky":{"iana":[null]}}');

/***/ })

};
;