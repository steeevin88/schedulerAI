/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/rrule";
exports.ids = ["vendor-chunks/rrule"];
exports.modules = {

/***/ "(ssr)/./node_modules/rrule/dist/es5/rrule.js":
/*!**********************************************!*\
  !*** ./node_modules/rrule/dist/es5/rrule.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! luxon */ \"(ssr)/./node_modules/luxon/build/node/luxon.js\"));\n\telse {}\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__3__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_652__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_652__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__nested_webpack_require_652__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__nested_webpack_require_652__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__nested_webpack_require_652__.d = function(exports, name, getter) {\n/******/ \t\tif(!__nested_webpack_require_652__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__nested_webpack_require_652__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__nested_webpack_require_652__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __nested_webpack_require_652__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__nested_webpack_require_652__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __nested_webpack_require_652__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__nested_webpack_require_652__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__nested_webpack_require_652__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__nested_webpack_require_652__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__nested_webpack_require_652__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __nested_webpack_require_652__(__nested_webpack_require_652__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, __nested_webpack_exports__, __nested_webpack_require_4128__) {\n\n\"use strict\";\n/* harmony export (binding) */ __nested_webpack_require_4128__.d(__nested_webpack_exports__, \"f\", function() { return isPresent; });\n/* harmony export (binding) */ __nested_webpack_require_4128__.d(__nested_webpack_exports__, \"e\", function() { return isNumber; });\n/* harmony export (binding) */ __nested_webpack_require_4128__.d(__nested_webpack_exports__, \"g\", function() { return isWeekdayStr; });\n/* harmony export (binding) */ __nested_webpack_require_4128__.d(__nested_webpack_exports__, \"d\", function() { return isArray; });\n/* harmony export (binding) */ __nested_webpack_require_4128__.d(__nested_webpack_exports__, \"k\", function() { return range; });\n/* unused harmony export clone */\n/* harmony export (binding) */ __nested_webpack_require_4128__.d(__nested_webpack_exports__, \"l\", function() { return repeat; });\n/* harmony export (binding) */ __nested_webpack_require_4128__.d(__nested_webpack_exports__, \"n\", function() { return toArray; });\n/* harmony export (binding) */ __nested_webpack_require_4128__.d(__nested_webpack_exports__, \"i\", function() { return padStart; });\n/* harmony export (binding) */ __nested_webpack_require_4128__.d(__nested_webpack_exports__, \"m\", function() { return split; });\n/* harmony export (binding) */ __nested_webpack_require_4128__.d(__nested_webpack_exports__, \"j\", function() { return pymod; });\n/* harmony export (binding) */ __nested_webpack_require_4128__.d(__nested_webpack_exports__, \"a\", function() { return divmod; });\n/* harmony export (binding) */ __nested_webpack_require_4128__.d(__nested_webpack_exports__, \"b\", function() { return empty; });\n/* harmony export (binding) */ __nested_webpack_require_4128__.d(__nested_webpack_exports__, \"h\", function() { return notEmpty; });\n/* harmony export (binding) */ __nested_webpack_require_4128__.d(__nested_webpack_exports__, \"c\", function() { return includes; });\n/* harmony import */ var _weekday__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_4128__(2);\n// =============================================================================\n// Helper functions\n// =============================================================================\n\nvar isPresent = function (value) {\n    return value !== null && value !== undefined;\n};\nvar isNumber = function (value) {\n    return typeof value === 'number';\n};\nvar isWeekdayStr = function (value) {\n    return _weekday__WEBPACK_IMPORTED_MODULE_0__[/* ALL_WEEKDAYS */ \"a\"].indexOf(value) >= 0;\n};\nvar isArray = Array.isArray;\n/**\n * Simplified version of python's range()\n */\nvar range = function (start, end) {\n    if (end === void 0) { end = start; }\n    if (arguments.length === 1) {\n        end = start;\n        start = 0;\n    }\n    var rang = [];\n    for (var i = start; i < end; i++)\n        rang.push(i);\n    return rang;\n};\nvar clone = function (array) {\n    return [].concat(array);\n};\nvar repeat = function (value, times) {\n    var i = 0;\n    var array = [];\n    if (isArray(value)) {\n        for (; i < times; i++)\n            array[i] = [].concat(value);\n    }\n    else {\n        for (; i < times; i++)\n            array[i] = value;\n    }\n    return array;\n};\nvar toArray = function (item) {\n    if (isArray(item)) {\n        return item;\n    }\n    return [item];\n};\nfunction padStart(item, targetLength, padString) {\n    if (padString === void 0) { padString = ' '; }\n    var str = String(item);\n    targetLength = targetLength >> 0;\n    if (str.length > targetLength) {\n        return String(str);\n    }\n    targetLength = targetLength - str.length;\n    if (targetLength > padString.length) {\n        padString += repeat(padString, targetLength / padString.length);\n    }\n    return padString.slice(0, targetLength) + String(str);\n}\n/**\n * Python like split\n */\nvar split = function (str, sep, num) {\n    var splits = str.split(sep);\n    return num\n        ? splits.slice(0, num).concat([splits.slice(num).join(sep)])\n        : splits;\n};\n/**\n * closure/goog/math/math.js:modulo\n * Copyright 2006 The Closure Library Authors.\n * The % operator in JavaScript returns the remainder of a / b, but differs from\n * some other languages in that the result will have the same sign as the\n * dividend. For example, -1 % 8 == -1, whereas in some other languages\n * (such as Python) the result would be 7. This function emulates the more\n * correct modulo behavior, which is useful for certain applications such as\n * calculating an offset index in a circular list.\n *\n * @param {number} a The dividend.\n * @param {number} b The divisor.\n * @return {number} a % b where the result is between 0 and b (either 0 <= x < b\n *     or b < x <= 0, depending on the sign of b).\n */\nvar pymod = function (a, b) {\n    var r = a % b;\n    // If r and b differ in sign, add b to wrap the result to the correct sign.\n    return r * b < 0 ? r + b : r;\n};\n/**\n * @see: <http://docs.python.org/library/functions.html#divmod>\n */\nvar divmod = function (a, b) {\n    return { div: Math.floor(a / b), mod: pymod(a, b) };\n};\nvar empty = function (obj) {\n    return !isPresent(obj) || obj.length === 0;\n};\n/**\n * Python-like boolean\n * @return {Boolean} value of an object/primitive, taking into account\n * the fact that in Python an empty list's/tuple's\n * boolean value is False, whereas in JS it's true\n */\nvar notEmpty = function (obj) {\n    return !empty(obj);\n};\n/**\n * Return true if a value is in an array\n */\nvar includes = function (arr, val) {\n    return notEmpty(arr) && arr.indexOf(val) !== -1;\n};\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __nested_webpack_exports__, __nested_webpack_require_9398__) {\n\n\"use strict\";\n__nested_webpack_require_9398__.r(__nested_webpack_exports__);\n\n// EXTERNAL MODULE: ./src/helpers.ts\nvar helpers = __nested_webpack_require_9398__(0);\n\n// CONCATENATED MODULE: ./src/dateutil.ts\n\n/**\n * General date-related utilities.\n * Also handles several incompatibilities between JavaScript and Python\n *\n */\nvar dateutil_dateutil;\n(function (dateutil) {\n    dateutil.MONTH_DAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    /**\n     * Number of milliseconds of one day\n     */\n    dateutil.ONE_DAY = 1000 * 60 * 60 * 24;\n    /**\n     * @see: <http://docs.python.org/library/datetime.html#datetime.MAXYEAR>\n     */\n    dateutil.MAXYEAR = 9999;\n    /**\n     * Python uses 1-Jan-1 as the base for calculating ordinals but we don't\n     * want to confuse the JS engine with milliseconds > Number.MAX_NUMBER,\n     * therefore we use 1-Jan-1970 instead\n     */\n    dateutil.ORDINAL_BASE = new Date(Date.UTC(1970, 0, 1));\n    /**\n     * Python: MO-SU: 0 - 6\n     * JS: SU-SAT 0 - 6\n     */\n    dateutil.PY_WEEKDAYS = [6, 0, 1, 2, 3, 4, 5];\n    /**\n     * py_date.timetuple()[7]\n     */\n    dateutil.getYearDay = function (date) {\n        var dateNoTime = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());\n        return (Math.ceil((dateNoTime.valueOf() -\n            new Date(date.getUTCFullYear(), 0, 1).valueOf()) /\n            dateutil.ONE_DAY) + 1);\n    };\n    dateutil.isLeapYear = function (year) {\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n    };\n    dateutil.isDate = function (value) {\n        return value instanceof Date;\n    };\n    dateutil.isValidDate = function (value) {\n        return dateutil.isDate(value) && !isNaN(value.getTime());\n    };\n    /**\n     * @return {Number} the date's timezone offset in ms\n     */\n    dateutil.tzOffset = function (date) {\n        return date.getTimezoneOffset() * 60 * 1000;\n    };\n    /**\n     * @see: <http://www.mcfedries.com/JavaScript/DaysBetween.asp>\n     */\n    dateutil.daysBetween = function (date1, date2) {\n        // The number of milliseconds in one day\n        // Convert both dates to milliseconds\n        var date1ms = date1.getTime() - dateutil.tzOffset(date1);\n        var date2ms = date2.getTime() - dateutil.tzOffset(date2);\n        // Calculate the difference in milliseconds\n        var differencems = date1ms - date2ms;\n        // Convert back to days and return\n        return Math.round(differencems / dateutil.ONE_DAY);\n    };\n    /**\n     * @see: <http://docs.python.org/library/datetime.html#datetime.date.toordinal>\n     */\n    dateutil.toOrdinal = function (date) {\n        return dateutil.daysBetween(date, dateutil.ORDINAL_BASE);\n    };\n    /**\n     * @see - <http://docs.python.org/library/datetime.html#datetime.date.fromordinal>\n     */\n    dateutil.fromOrdinal = function (ordinal) {\n        return new Date(dateutil.ORDINAL_BASE.getTime() + ordinal * dateutil.ONE_DAY);\n    };\n    dateutil.getMonthDays = function (date) {\n        var month = date.getUTCMonth();\n        return month === 1 && dateutil.isLeapYear(date.getUTCFullYear())\n            ? 29\n            : dateutil.MONTH_DAYS[month];\n    };\n    /**\n     * @return {Number} python-like weekday\n     */\n    dateutil.getWeekday = function (date) {\n        return dateutil.PY_WEEKDAYS[date.getUTCDay()];\n    };\n    /**\n     * @see: <http://docs.python.org/library/calendar.html#calendar.monthrange>\n     */\n    dateutil.monthRange = function (year, month) {\n        var date = new Date(Date.UTC(year, month, 1));\n        return [dateutil.getWeekday(date), dateutil.getMonthDays(date)];\n    };\n    /**\n     * @see: <http://docs.python.org/library/datetime.html#datetime.datetime.combine>\n     */\n    dateutil.combine = function (date, time) {\n        time = time || date;\n        return new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), time.getHours(), time.getMinutes(), time.getSeconds(), time.getMilliseconds()));\n    };\n    dateutil.clone = function (date) {\n        var dolly = new Date(date.getTime());\n        return dolly;\n    };\n    dateutil.cloneDates = function (dates) {\n        var clones = [];\n        for (var i = 0; i < dates.length; i++) {\n            clones.push(dateutil.clone(dates[i]));\n        }\n        return clones;\n    };\n    /**\n     * Sorts an array of Date or dateutil.Time objects\n     */\n    dateutil.sort = function (dates) {\n        dates.sort(function (a, b) {\n            return a.getTime() - b.getTime();\n        });\n    };\n    dateutil.timeToUntilString = function (time, utc) {\n        if (utc === void 0) { utc = true; }\n        var date = new Date(time);\n        return [\n            Object(helpers[\"i\" /* padStart */])(date.getUTCFullYear().toString(), 4, '0'),\n            Object(helpers[\"i\" /* padStart */])(date.getUTCMonth() + 1, 2, '0'),\n            Object(helpers[\"i\" /* padStart */])(date.getUTCDate(), 2, '0'),\n            'T',\n            Object(helpers[\"i\" /* padStart */])(date.getUTCHours(), 2, '0'),\n            Object(helpers[\"i\" /* padStart */])(date.getUTCMinutes(), 2, '0'),\n            Object(helpers[\"i\" /* padStart */])(date.getUTCSeconds(), 2, '0'),\n            utc ? 'Z' : ''\n        ].join('');\n    };\n    dateutil.untilStringToDate = function (until) {\n        var re = /^(\\d{4})(\\d{2})(\\d{2})(T(\\d{2})(\\d{2})(\\d{2})Z?)?$/;\n        var bits = re.exec(until);\n        if (!bits)\n            throw new Error(\"Invalid UNTIL value: \" + until);\n        return new Date(Date.UTC(parseInt(bits[1], 10), parseInt(bits[2], 10) - 1, parseInt(bits[3], 10), parseInt(bits[5], 10) || 0, parseInt(bits[6], 10) || 0, parseInt(bits[7], 10) || 0));\n    };\n})(dateutil_dateutil || (dateutil_dateutil = {}));\n/* harmony default export */ var src_dateutil = (dateutil_dateutil);\n\n// CONCATENATED MODULE: ./src/iterresult.ts\n/**\n * This class helps us to emulate python's generators, sorta.\n */\nvar IterResult = /** @class */ (function () {\n    function IterResult(method, args) {\n        this.minDate = null;\n        this.maxDate = null;\n        this._result = [];\n        this.total = 0;\n        this.method = method;\n        this.args = args;\n        if (method === 'between') {\n            this.maxDate = args.inc\n                ? args.before\n                : new Date(args.before.getTime() - 1);\n            this.minDate = args.inc ? args.after : new Date(args.after.getTime() + 1);\n        }\n        else if (method === 'before') {\n            this.maxDate = args.inc ? args.dt : new Date(args.dt.getTime() - 1);\n        }\n        else if (method === 'after') {\n            this.minDate = args.inc ? args.dt : new Date(args.dt.getTime() + 1);\n        }\n    }\n    /**\n     * Possibly adds a date into the result.\n     *\n     * @param {Date} date - the date isn't necessarly added to the result\n     *                      list (if it is too late/too early)\n     * @return {Boolean} true if it makes sense to continue the iteration\n     *                   false if we're done.\n     */\n    IterResult.prototype.accept = function (date) {\n        ++this.total;\n        var tooEarly = this.minDate && date < this.minDate;\n        var tooLate = this.maxDate && date > this.maxDate;\n        if (this.method === 'between') {\n            if (tooEarly)\n                return true;\n            if (tooLate)\n                return false;\n        }\n        else if (this.method === 'before') {\n            if (tooLate)\n                return false;\n        }\n        else if (this.method === 'after') {\n            if (tooEarly)\n                return true;\n            this.add(date);\n            return false;\n        }\n        return this.add(date);\n    };\n    /**\n     *\n     * @param {Date} date that is part of the result.\n     * @return {Boolean} whether we are interested in more values.\n     */\n    IterResult.prototype.add = function (date) {\n        this._result.push(date);\n        return true;\n    };\n    /**\n     * 'before' and 'after' return only one date, whereas 'all'\n     * and 'between' an array.\n     * @return {Date,Array?}\n     */\n    IterResult.prototype.getValue = function () {\n        var res = this._result;\n        switch (this.method) {\n            case 'all':\n            case 'between':\n                return res;\n            case 'before':\n            case 'after':\n            default:\n                return (res.length ? res[res.length - 1] : null);\n        }\n    };\n    IterResult.prototype.clone = function () {\n        return new IterResult(this.method, this.args);\n    };\n    return IterResult;\n}());\n/* harmony default export */ var iterresult = (IterResult);\n\n// CONCATENATED MODULE: ./node_modules/tslib/tslib.es6.js\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nfunction __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\n// CONCATENATED MODULE: ./src/callbackiterresult.ts\n\n\n/**\n * IterResult subclass that calls a callback function on each add,\n * and stops iterating when the callback returns false.\n */\nvar callbackiterresult_CallbackIterResult = /** @class */ (function (_super) {\n    __extends(CallbackIterResult, _super);\n    function CallbackIterResult(method, args, iterator) {\n        var _this = _super.call(this, method, args) || this;\n        _this.iterator = iterator;\n        return _this;\n    }\n    CallbackIterResult.prototype.add = function (date) {\n        if (this.iterator(date, this._result.length)) {\n            this._result.push(date);\n            return true;\n        }\n        return false;\n    };\n    return CallbackIterResult;\n}(iterresult));\n/* harmony default export */ var callbackiterresult = (callbackiterresult_CallbackIterResult);\n\n// CONCATENATED MODULE: ./src/types.ts\nvar Frequency;\n(function (Frequency) {\n    Frequency[Frequency[\"YEARLY\"] = 0] = \"YEARLY\";\n    Frequency[Frequency[\"MONTHLY\"] = 1] = \"MONTHLY\";\n    Frequency[Frequency[\"WEEKLY\"] = 2] = \"WEEKLY\";\n    Frequency[Frequency[\"DAILY\"] = 3] = \"DAILY\";\n    Frequency[Frequency[\"HOURLY\"] = 4] = \"HOURLY\";\n    Frequency[Frequency[\"MINUTELY\"] = 5] = \"MINUTELY\";\n    Frequency[Frequency[\"SECONDLY\"] = 6] = \"SECONDLY\";\n})(Frequency || (Frequency = {}));\nfunction freqIsDailyOrGreater(freq) {\n    return freq < Frequency.HOURLY;\n}\n\n// EXTERNAL MODULE: ./src/weekday.ts\nvar weekday = __nested_webpack_require_9398__(2);\n\n// CONCATENATED MODULE: ./src/datetime.ts\n\n\n\n\nvar Time = /** @class */ (function () {\n    function Time(hour, minute, second, millisecond) {\n        this.hour = hour;\n        this.minute = minute;\n        this.second = second;\n        this.millisecond = millisecond || 0;\n    }\n    Time.prototype.getHours = function () {\n        return this.hour;\n    };\n    Time.prototype.getMinutes = function () {\n        return this.minute;\n    };\n    Time.prototype.getSeconds = function () {\n        return this.second;\n    };\n    Time.prototype.getMilliseconds = function () {\n        return this.millisecond;\n    };\n    Time.prototype.getTime = function () {\n        return ((this.hour * 60 * 60 + this.minute * 60 + this.second) * 1000 +\n            this.millisecond);\n    };\n    return Time;\n}());\n\nvar datetime_DateTime = /** @class */ (function (_super) {\n    __extends(DateTime, _super);\n    function DateTime(year, month, day, hour, minute, second, millisecond) {\n        var _this = _super.call(this, hour, minute, second, millisecond) || this;\n        _this.year = year;\n        _this.month = month;\n        _this.day = day;\n        return _this;\n    }\n    DateTime.fromDate = function (date) {\n        return new this(date.getUTCFullYear(), date.getUTCMonth() + 1, date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.valueOf() % 1000);\n    };\n    DateTime.prototype.getWeekday = function () {\n        return dateutil_dateutil.getWeekday(new Date(this.getTime()));\n    };\n    DateTime.prototype.getTime = function () {\n        return new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond)).getTime();\n    };\n    DateTime.prototype.getDay = function () {\n        return this.day;\n    };\n    DateTime.prototype.getMonth = function () {\n        return this.month;\n    };\n    DateTime.prototype.getYear = function () {\n        return this.year;\n    };\n    DateTime.prototype.addYears = function (years) {\n        this.year += years;\n    };\n    DateTime.prototype.addMonths = function (months) {\n        this.month += months;\n        if (this.month > 12) {\n            var yearDiv = Math.floor(this.month / 12);\n            var monthMod = Object(helpers[\"j\" /* pymod */])(this.month, 12);\n            this.month = monthMod;\n            this.year += yearDiv;\n            if (this.month === 0) {\n                this.month = 12;\n                --this.year;\n            }\n        }\n    };\n    DateTime.prototype.addWeekly = function (days, wkst) {\n        if (wkst > this.getWeekday()) {\n            this.day += -(this.getWeekday() + 1 + (6 - wkst)) + days * 7;\n        }\n        else {\n            this.day += -(this.getWeekday() - wkst) + days * 7;\n        }\n        this.fixDay();\n    };\n    DateTime.prototype.addDaily = function (days) {\n        this.day += days;\n        this.fixDay();\n    };\n    DateTime.prototype.addHours = function (hours, filtered, byhour) {\n        if (filtered) {\n            // Jump to one iteration before next day\n            this.hour += Math.floor((23 - this.hour) / hours) * hours;\n        }\n        while (true) {\n            this.hour += hours;\n            var _a = Object(helpers[\"a\" /* divmod */])(this.hour, 24), dayDiv = _a.div, hourMod = _a.mod;\n            if (dayDiv) {\n                this.hour = hourMod;\n                this.addDaily(dayDiv);\n            }\n            if (Object(helpers[\"b\" /* empty */])(byhour) || Object(helpers[\"c\" /* includes */])(byhour, this.hour))\n                break;\n        }\n    };\n    DateTime.prototype.addMinutes = function (minutes, filtered, byhour, byminute) {\n        if (filtered) {\n            // Jump to one iteration before next day\n            this.minute +=\n                Math.floor((1439 - (this.hour * 60 + this.minute)) / minutes) * minutes;\n        }\n        while (true) {\n            this.minute += minutes;\n            var _a = Object(helpers[\"a\" /* divmod */])(this.minute, 60), hourDiv = _a.div, minuteMod = _a.mod;\n            if (hourDiv) {\n                this.minute = minuteMod;\n                this.addHours(hourDiv, false, byhour);\n            }\n            if ((Object(helpers[\"b\" /* empty */])(byhour) || Object(helpers[\"c\" /* includes */])(byhour, this.hour)) &&\n                (Object(helpers[\"b\" /* empty */])(byminute) || Object(helpers[\"c\" /* includes */])(byminute, this.minute))) {\n                break;\n            }\n        }\n    };\n    DateTime.prototype.addSeconds = function (seconds, filtered, byhour, byminute, bysecond) {\n        if (filtered) {\n            // Jump to one iteration before next day\n            this.second +=\n                Math.floor((86399 - (this.hour * 3600 + this.minute * 60 + this.second)) / seconds) * seconds;\n        }\n        while (true) {\n            this.second += seconds;\n            var _a = Object(helpers[\"a\" /* divmod */])(this.second, 60), minuteDiv = _a.div, secondMod = _a.mod;\n            if (minuteDiv) {\n                this.second = secondMod;\n                this.addMinutes(minuteDiv, false, byhour, byminute);\n            }\n            if ((Object(helpers[\"b\" /* empty */])(byhour) || Object(helpers[\"c\" /* includes */])(byhour, this.hour)) &&\n                (Object(helpers[\"b\" /* empty */])(byminute) || Object(helpers[\"c\" /* includes */])(byminute, this.minute)) &&\n                (Object(helpers[\"b\" /* empty */])(bysecond) || Object(helpers[\"c\" /* includes */])(bysecond, this.second))) {\n                break;\n            }\n        }\n    };\n    DateTime.prototype.fixDay = function () {\n        if (this.day <= 28) {\n            return;\n        }\n        var daysinmonth = dateutil_dateutil.monthRange(this.year, this.month - 1)[1];\n        if (this.day <= daysinmonth) {\n            return;\n        }\n        while (this.day > daysinmonth) {\n            this.day -= daysinmonth;\n            ++this.month;\n            if (this.month === 13) {\n                this.month = 1;\n                ++this.year;\n                if (this.year > dateutil_dateutil.MAXYEAR) {\n                    return;\n                }\n            }\n            daysinmonth = dateutil_dateutil.monthRange(this.year, this.month - 1)[1];\n        }\n    };\n    DateTime.prototype.add = function (options, filtered) {\n        var freq = options.freq, interval = options.interval, wkst = options.wkst, byhour = options.byhour, byminute = options.byminute, bysecond = options.bysecond;\n        switch (freq) {\n            case Frequency.YEARLY: return this.addYears(interval);\n            case Frequency.MONTHLY: return this.addMonths(interval);\n            case Frequency.WEEKLY: return this.addWeekly(interval, wkst);\n            case Frequency.DAILY: return this.addDaily(interval);\n            case Frequency.HOURLY: return this.addHours(interval, filtered, byhour);\n            case Frequency.MINUTELY: return this.addMinutes(interval, filtered, byhour, byminute);\n            case Frequency.SECONDLY: return this.addSeconds(interval, filtered, byhour, byminute, bysecond);\n        }\n    };\n    return DateTime;\n}(Time));\n\n\n// CONCATENATED MODULE: ./src/parseoptions.ts\n\n\n\n\n\n\n\nfunction initializeOptions(options) {\n    var invalid = [];\n    var keys = Object.keys(options);\n    // Shallow copy for options and origOptions and check for invalid\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n        var key = keys_1[_i];\n        if (!Object(helpers[\"c\" /* includes */])(rrule_defaultKeys, key))\n            invalid.push(key);\n        if (src_dateutil.isDate(options[key]) && !src_dateutil.isValidDate(options[key]))\n            invalid.push(key);\n    }\n    if (invalid.length) {\n        throw new Error('Invalid options: ' + invalid.join(', '));\n    }\n    return __assign({}, options);\n}\nfunction parseOptions(options) {\n    var opts = __assign(__assign({}, DEFAULT_OPTIONS), initializeOptions(options));\n    if (Object(helpers[\"f\" /* isPresent */])(opts.byeaster))\n        opts.freq = src_rrule.YEARLY;\n    if (!(Object(helpers[\"f\" /* isPresent */])(opts.freq) && src_rrule.FREQUENCIES[opts.freq])) {\n        throw new Error(\"Invalid frequency: \" + opts.freq + \" \" + options.freq);\n    }\n    if (!opts.dtstart)\n        opts.dtstart = new Date(new Date().setMilliseconds(0));\n    if (!Object(helpers[\"f\" /* isPresent */])(opts.wkst)) {\n        opts.wkst = src_rrule.MO.weekday;\n    }\n    else if (Object(helpers[\"e\" /* isNumber */])(opts.wkst)) {\n        // cool, just keep it like that\n    }\n    else {\n        opts.wkst = opts.wkst.weekday;\n    }\n    if (Object(helpers[\"f\" /* isPresent */])(opts.bysetpos)) {\n        if (Object(helpers[\"e\" /* isNumber */])(opts.bysetpos))\n            opts.bysetpos = [opts.bysetpos];\n        for (var i = 0; i < opts.bysetpos.length; i++) {\n            var v = opts.bysetpos[i];\n            if (v === 0 || !(v >= -366 && v <= 366)) {\n                throw new Error('bysetpos must be between 1 and 366,' + ' or between -366 and -1');\n            }\n        }\n    }\n    if (!(Boolean(opts.byweekno) ||\n        Object(helpers[\"h\" /* notEmpty */])(opts.byweekno) ||\n        Object(helpers[\"h\" /* notEmpty */])(opts.byyearday) ||\n        Boolean(opts.bymonthday) ||\n        Object(helpers[\"h\" /* notEmpty */])(opts.bymonthday) ||\n        Object(helpers[\"f\" /* isPresent */])(opts.byweekday) ||\n        Object(helpers[\"f\" /* isPresent */])(opts.byeaster))) {\n        switch (opts.freq) {\n            case src_rrule.YEARLY:\n                if (!opts.bymonth)\n                    opts.bymonth = opts.dtstart.getUTCMonth() + 1;\n                opts.bymonthday = opts.dtstart.getUTCDate();\n                break;\n            case src_rrule.MONTHLY:\n                opts.bymonthday = opts.dtstart.getUTCDate();\n                break;\n            case src_rrule.WEEKLY:\n                opts.byweekday = [src_dateutil.getWeekday(opts.dtstart)];\n                break;\n        }\n    }\n    // bymonth\n    if (Object(helpers[\"f\" /* isPresent */])(opts.bymonth) && !Object(helpers[\"d\" /* isArray */])(opts.bymonth)) {\n        opts.bymonth = [opts.bymonth];\n    }\n    // byyearday\n    if (Object(helpers[\"f\" /* isPresent */])(opts.byyearday) &&\n        !Object(helpers[\"d\" /* isArray */])(opts.byyearday) &&\n        Object(helpers[\"e\" /* isNumber */])(opts.byyearday)) {\n        opts.byyearday = [opts.byyearday];\n    }\n    // bymonthday\n    if (!Object(helpers[\"f\" /* isPresent */])(opts.bymonthday)) {\n        opts.bymonthday = [];\n        opts.bynmonthday = [];\n    }\n    else if (Object(helpers[\"d\" /* isArray */])(opts.bymonthday)) {\n        var bymonthday = [];\n        var bynmonthday = [];\n        for (var i = 0; i < opts.bymonthday.length; i++) {\n            var v = opts.bymonthday[i];\n            if (v > 0) {\n                bymonthday.push(v);\n            }\n            else if (v < 0) {\n                bynmonthday.push(v);\n            }\n        }\n        opts.bymonthday = bymonthday;\n        opts.bynmonthday = bynmonthday;\n    }\n    else if (opts.bymonthday < 0) {\n        opts.bynmonthday = [opts.bymonthday];\n        opts.bymonthday = [];\n    }\n    else {\n        opts.bynmonthday = [];\n        opts.bymonthday = [opts.bymonthday];\n    }\n    // byweekno\n    if (Object(helpers[\"f\" /* isPresent */])(opts.byweekno) && !Object(helpers[\"d\" /* isArray */])(opts.byweekno)) {\n        opts.byweekno = [opts.byweekno];\n    }\n    // byweekday / bynweekday\n    if (!Object(helpers[\"f\" /* isPresent */])(opts.byweekday)) {\n        opts.bynweekday = null;\n    }\n    else if (Object(helpers[\"e\" /* isNumber */])(opts.byweekday)) {\n        opts.byweekday = [opts.byweekday];\n        opts.bynweekday = null;\n    }\n    else if (Object(helpers[\"g\" /* isWeekdayStr */])(opts.byweekday)) {\n        opts.byweekday = [weekday[\"b\" /* Weekday */].fromStr(opts.byweekday).weekday];\n        opts.bynweekday = null;\n    }\n    else if (opts.byweekday instanceof weekday[\"b\" /* Weekday */]) {\n        if (!opts.byweekday.n || opts.freq > src_rrule.MONTHLY) {\n            opts.byweekday = [opts.byweekday.weekday];\n            opts.bynweekday = null;\n        }\n        else {\n            opts.bynweekday = [[opts.byweekday.weekday, opts.byweekday.n]];\n            opts.byweekday = null;\n        }\n    }\n    else {\n        var byweekday = [];\n        var bynweekday = [];\n        for (var i = 0; i < opts.byweekday.length; i++) {\n            var wday = opts.byweekday[i];\n            if (Object(helpers[\"e\" /* isNumber */])(wday)) {\n                byweekday.push(wday);\n                continue;\n            }\n            else if (Object(helpers[\"g\" /* isWeekdayStr */])(wday)) {\n                byweekday.push(weekday[\"b\" /* Weekday */].fromStr(wday).weekday);\n                continue;\n            }\n            if (!wday.n || opts.freq > src_rrule.MONTHLY) {\n                byweekday.push(wday.weekday);\n            }\n            else {\n                bynweekday.push([wday.weekday, wday.n]);\n            }\n        }\n        opts.byweekday = Object(helpers[\"h\" /* notEmpty */])(byweekday) ? byweekday : null;\n        opts.bynweekday = Object(helpers[\"h\" /* notEmpty */])(bynweekday) ? bynweekday : null;\n    }\n    // byhour\n    if (!Object(helpers[\"f\" /* isPresent */])(opts.byhour)) {\n        opts.byhour =\n            opts.freq < src_rrule.HOURLY ? [opts.dtstart.getUTCHours()] : null;\n    }\n    else if (Object(helpers[\"e\" /* isNumber */])(opts.byhour)) {\n        opts.byhour = [opts.byhour];\n    }\n    // byminute\n    if (!Object(helpers[\"f\" /* isPresent */])(opts.byminute)) {\n        opts.byminute =\n            opts.freq < src_rrule.MINUTELY ? [opts.dtstart.getUTCMinutes()] : null;\n    }\n    else if (Object(helpers[\"e\" /* isNumber */])(opts.byminute)) {\n        opts.byminute = [opts.byminute];\n    }\n    // bysecond\n    if (!Object(helpers[\"f\" /* isPresent */])(opts.bysecond)) {\n        opts.bysecond =\n            opts.freq < src_rrule.SECONDLY ? [opts.dtstart.getUTCSeconds()] : null;\n    }\n    else if (Object(helpers[\"e\" /* isNumber */])(opts.bysecond)) {\n        opts.bysecond = [opts.bysecond];\n    }\n    return { parsedOptions: opts };\n}\nfunction buildTimeset(opts) {\n    var millisecondModulo = opts.dtstart.getTime() % 1000;\n    if (!freqIsDailyOrGreater(opts.freq)) {\n        return [];\n    }\n    var timeset = [];\n    opts.byhour.forEach(function (hour) {\n        opts.byminute.forEach(function (minute) {\n            opts.bysecond.forEach(function (second) {\n                timeset.push(new Time(hour, minute, second, millisecondModulo));\n            });\n        });\n    });\n    return timeset;\n}\n\n// CONCATENATED MODULE: ./src/parsestring.ts\n\n\n\n\n\nfunction parseString(rfcString) {\n    var options = rfcString.split('\\n').map(parseLine).filter(function (x) { return x !== null; });\n    return __assign(__assign({}, options[0]), options[1]);\n}\nfunction parseDtstart(line) {\n    var options = {};\n    var dtstartWithZone = /DTSTART(?:;TZID=([^:=]+?))?(?::|=)([^;\\s]+)/i.exec(line);\n    if (!dtstartWithZone) {\n        return options;\n    }\n    var _ = dtstartWithZone[0], tzid = dtstartWithZone[1], dtstart = dtstartWithZone[2];\n    if (tzid) {\n        options.tzid = tzid;\n    }\n    options.dtstart = src_dateutil.untilStringToDate(dtstart);\n    return options;\n}\nfunction parseLine(rfcString) {\n    rfcString = rfcString.replace(/^\\s+|\\s+$/, '');\n    if (!rfcString.length)\n        return null;\n    var header = /^([A-Z]+?)[:;]/.exec(rfcString.toUpperCase());\n    if (!header) {\n        return parseRrule(rfcString);\n    }\n    var _ = header[0], key = header[1];\n    switch (key.toUpperCase()) {\n        case 'RRULE':\n        case 'EXRULE':\n            return parseRrule(rfcString);\n        case 'DTSTART':\n            return parseDtstart(rfcString);\n        default:\n            throw new Error(\"Unsupported RFC prop \" + key + \" in \" + rfcString);\n    }\n}\nfunction parseRrule(line) {\n    var strippedLine = line.replace(/^RRULE:/i, '');\n    var options = parseDtstart(strippedLine);\n    var attrs = line.replace(/^(?:RRULE|EXRULE):/i, '').split(';');\n    attrs.forEach(function (attr) {\n        var _a = attr.split('='), key = _a[0], value = _a[1];\n        switch (key.toUpperCase()) {\n            case 'FREQ':\n                options.freq = Frequency[value.toUpperCase()];\n                break;\n            case 'WKST':\n                options.wkst = Days[value.toUpperCase()];\n                break;\n            case 'COUNT':\n            case 'INTERVAL':\n            case 'BYSETPOS':\n            case 'BYMONTH':\n            case 'BYMONTHDAY':\n            case 'BYYEARDAY':\n            case 'BYWEEKNO':\n            case 'BYHOUR':\n            case 'BYMINUTE':\n            case 'BYSECOND':\n                var num = parseNumber(value);\n                var optionKey = key.toLowerCase();\n                // @ts-ignore\n                options[optionKey] = num;\n                break;\n            case 'BYWEEKDAY':\n            case 'BYDAY':\n                options.byweekday = parseWeekday(value);\n                break;\n            case 'DTSTART':\n            case 'TZID':\n                // for backwards compatibility\n                var dtstart = parseDtstart(line);\n                options.tzid = dtstart.tzid;\n                options.dtstart = dtstart.dtstart;\n                break;\n            case 'UNTIL':\n                options.until = src_dateutil.untilStringToDate(value);\n                break;\n            case 'BYEASTER':\n                options.byeaster = Number(value);\n                break;\n            default:\n                throw new Error(\"Unknown RRULE property '\" + key + \"'\");\n        }\n    });\n    return options;\n}\nfunction parseNumber(value) {\n    if (value.indexOf(',') !== -1) {\n        var values = value.split(',');\n        return values.map(parseIndividualNumber);\n    }\n    return parseIndividualNumber(value);\n}\nfunction parseIndividualNumber(value) {\n    if (/^[+-]?\\d+$/.test(value)) {\n        return Number(value);\n    }\n    return value;\n}\nfunction parseWeekday(value) {\n    var days = value.split(',');\n    return days.map(function (day) {\n        if (day.length === 2) {\n            // MO, TU, ...\n            return Days[day]; // wday instanceof Weekday\n        }\n        // -1MO, +3FR, 1SO, 13TU ...\n        var parts = day.match(/^([+-]?\\d{1,2})([A-Z]{2})$/);\n        var n = Number(parts[1]);\n        var wdaypart = parts[2];\n        var wday = Days[wdaypart].weekday;\n        return new weekday[\"b\" /* Weekday */](wday, n);\n    });\n}\n\n// EXTERNAL MODULE: external \"luxon\"\nvar external_luxon_ = __nested_webpack_require_9398__(3);\n\n// CONCATENATED MODULE: ./src/datewithzone.ts\n\n\nvar datewithzone_DateWithZone = /** @class */ (function () {\n    function DateWithZone(date, tzid) {\n        this.date = date;\n        this.tzid = tzid;\n    }\n    Object.defineProperty(DateWithZone.prototype, \"isUTC\", {\n        get: function () {\n            return !this.tzid || this.tzid.toUpperCase() === 'UTC';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DateWithZone.prototype.toString = function () {\n        var datestr = src_dateutil.timeToUntilString(this.date.getTime(), this.isUTC);\n        if (!this.isUTC) {\n            return \";TZID=\" + this.tzid + \":\" + datestr;\n        }\n        return \":\" + datestr;\n    };\n    DateWithZone.prototype.getTime = function () {\n        return this.date.getTime();\n    };\n    DateWithZone.prototype.rezonedDate = function () {\n        if (this.isUTC) {\n            return this.date;\n        }\n        try {\n            var datetime = external_luxon_[\"DateTime\"]\n                .fromJSDate(this.date);\n            var rezoned = datetime.setZone(this.tzid, { keepLocalTime: true });\n            return rezoned.toJSDate();\n        }\n        catch (e) {\n            if (e instanceof TypeError) {\n                console.error('Using TZID without Luxon available is unsupported. Returned times are in UTC, not the requested time zone');\n            }\n            return this.date;\n        }\n    };\n    return DateWithZone;\n}());\n\n\n// CONCATENATED MODULE: ./src/optionstostring.ts\n\n\n\n\n\nfunction optionsToString(options) {\n    var rrule = [];\n    var dtstart = '';\n    var keys = Object.keys(options);\n    var defaultKeys = Object.keys(DEFAULT_OPTIONS);\n    for (var i = 0; i < keys.length; i++) {\n        if (keys[i] === 'tzid')\n            continue;\n        if (!Object(helpers[\"c\" /* includes */])(defaultKeys, keys[i]))\n            continue;\n        var key = keys[i].toUpperCase();\n        var value = options[keys[i]];\n        var outValue = '';\n        if (!Object(helpers[\"f\" /* isPresent */])(value) || (Object(helpers[\"d\" /* isArray */])(value) && !value.length))\n            continue;\n        switch (key) {\n            case 'FREQ':\n                outValue = src_rrule.FREQUENCIES[options.freq];\n                break;\n            case 'WKST':\n                if (Object(helpers[\"e\" /* isNumber */])(value)) {\n                    outValue = new weekday[\"b\" /* Weekday */](value).toString();\n                }\n                else {\n                    outValue = value.toString();\n                }\n                break;\n            case 'BYWEEKDAY':\n                /*\n                NOTE: BYWEEKDAY is a special case.\n                RRule() deconstructs the rule.options.byweekday array\n                into an array of Weekday arguments.\n                On the other hand, rule.origOptions is an array of Weekdays.\n                We need to handle both cases here.\n                It might be worth change RRule to keep the Weekdays.\n      \n                Also, BYWEEKDAY (used by RRule) vs. BYDAY (RFC)\n      \n                */\n                key = 'BYDAY';\n                outValue = Object(helpers[\"n\" /* toArray */])(value).map(function (wday) {\n                    if (wday instanceof weekday[\"b\" /* Weekday */]) {\n                        return wday;\n                    }\n                    if (Object(helpers[\"d\" /* isArray */])(wday)) {\n                        return new weekday[\"b\" /* Weekday */](wday[0], wday[1]);\n                    }\n                    return new weekday[\"b\" /* Weekday */](wday);\n                }).toString();\n                break;\n            case 'DTSTART':\n                dtstart = buildDtstart(value, options.tzid);\n                break;\n            case 'UNTIL':\n                outValue = src_dateutil.timeToUntilString(value, !options.tzid);\n                break;\n            default:\n                if (Object(helpers[\"d\" /* isArray */])(value)) {\n                    var strValues = [];\n                    for (var j = 0; j < value.length; j++) {\n                        strValues[j] = String(value[j]);\n                    }\n                    outValue = strValues.toString();\n                }\n                else {\n                    outValue = String(value);\n                }\n        }\n        if (outValue) {\n            rrule.push([key, outValue]);\n        }\n    }\n    var rules = rrule.map(function (_a) {\n        var key = _a[0], value = _a[1];\n        return key + \"=\" + value.toString();\n    }).join(';');\n    var ruleString = '';\n    if (rules !== '') {\n        ruleString = \"RRULE:\" + rules;\n    }\n    return [dtstart, ruleString].filter(function (x) { return !!x; }).join('\\n');\n}\nfunction buildDtstart(dtstart, tzid) {\n    if (!dtstart) {\n        return '';\n    }\n    return 'DTSTART' + new datewithzone_DateWithZone(new Date(dtstart), tzid).toString();\n}\n\n// CONCATENATED MODULE: ./src/cache.ts\n\n\n\nvar cache_Cache = /** @class */ (function () {\n    function Cache() {\n        this.all = false;\n        this.before = [];\n        this.after = [];\n        this.between = [];\n    }\n    /**\n     * @param {String} what - all/before/after/between\n     * @param {Array,Date} value - an array of dates, one date, or null\n     * @param {Object?} args - _iter arguments\n     */\n    Cache.prototype._cacheAdd = function (what, value, args) {\n        if (value) {\n            value =\n                value instanceof Date\n                    ? src_dateutil.clone(value)\n                    : src_dateutil.cloneDates(value);\n        }\n        if (what === 'all') {\n            this.all = value;\n        }\n        else {\n            args._value = value;\n            this[what].push(args);\n        }\n    };\n    /**\n     * @return false - not in the cache\n     *         null  - cached, but zero occurrences (before/after)\n     *         Date  - cached (before/after)\n     *         []    - cached, but zero occurrences (all/between)\n     *         [Date1, DateN] - cached (all/between)\n     */\n    Cache.prototype._cacheGet = function (what, args) {\n        var cached = false;\n        var argsKeys = args ? Object.keys(args) : [];\n        var findCacheDiff = function (item) {\n            for (var i = 0; i < argsKeys.length; i++) {\n                var key = argsKeys[i];\n                if (String(args[key]) !== String(item[key])) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        var cachedObject = this[what];\n        if (what === 'all') {\n            cached = this.all;\n        }\n        else if (Object(helpers[\"d\" /* isArray */])(cachedObject)) {\n            // Let's see whether we've already called the\n            // 'what' method with the same 'args'\n            for (var i = 0; i < cachedObject.length; i++) {\n                var item = cachedObject[i];\n                if (argsKeys.length && findCacheDiff(item))\n                    continue;\n                cached = item._value;\n                break;\n            }\n        }\n        if (!cached && this.all) {\n            // Not in the cache, but we already know all the occurrences,\n            // so we can find the correct dates from the cached ones.\n            var iterResult = new iterresult(what, args);\n            for (var i = 0; i < this.all.length; i++) {\n                if (!iterResult.accept(this.all[i]))\n                    break;\n            }\n            cached = iterResult.getValue();\n            this._cacheAdd(what, cached, args);\n        }\n        return Object(helpers[\"d\" /* isArray */])(cached)\n            ? src_dateutil.cloneDates(cached)\n            : cached instanceof Date\n                ? src_dateutil.clone(cached)\n                : cached;\n    };\n    return Cache;\n}());\n\n\n// CONCATENATED MODULE: ./src/masks.ts\n\n\n// =============================================================================\n// Date masks\n// =============================================================================\n// Every mask is 7 days longer to handle cross-year weekly periods.\nvar M365MASK = __spreadArrays(Object(helpers[\"l\" /* repeat */])(1, 31), Object(helpers[\"l\" /* repeat */])(2, 28), Object(helpers[\"l\" /* repeat */])(3, 31), Object(helpers[\"l\" /* repeat */])(4, 30), Object(helpers[\"l\" /* repeat */])(5, 31), Object(helpers[\"l\" /* repeat */])(6, 30), Object(helpers[\"l\" /* repeat */])(7, 31), Object(helpers[\"l\" /* repeat */])(8, 31), Object(helpers[\"l\" /* repeat */])(9, 30), Object(helpers[\"l\" /* repeat */])(10, 31), Object(helpers[\"l\" /* repeat */])(11, 30), Object(helpers[\"l\" /* repeat */])(12, 31), Object(helpers[\"l\" /* repeat */])(1, 7));\nvar M366MASK = __spreadArrays(Object(helpers[\"l\" /* repeat */])(1, 31), Object(helpers[\"l\" /* repeat */])(2, 29), Object(helpers[\"l\" /* repeat */])(3, 31), Object(helpers[\"l\" /* repeat */])(4, 30), Object(helpers[\"l\" /* repeat */])(5, 31), Object(helpers[\"l\" /* repeat */])(6, 30), Object(helpers[\"l\" /* repeat */])(7, 31), Object(helpers[\"l\" /* repeat */])(8, 31), Object(helpers[\"l\" /* repeat */])(9, 30), Object(helpers[\"l\" /* repeat */])(10, 31), Object(helpers[\"l\" /* repeat */])(11, 30), Object(helpers[\"l\" /* repeat */])(12, 31), Object(helpers[\"l\" /* repeat */])(1, 7));\nvar M28 = Object(helpers[\"k\" /* range */])(1, 29);\nvar M29 = Object(helpers[\"k\" /* range */])(1, 30);\nvar M30 = Object(helpers[\"k\" /* range */])(1, 31);\nvar M31 = Object(helpers[\"k\" /* range */])(1, 32);\nvar MDAY366MASK = __spreadArrays(M31, M29, M31, M30, M31, M30, M31, M31, M30, M31, M30, M31, M31.slice(0, 7));\nvar MDAY365MASK = __spreadArrays(M31, M28, M31, M30, M31, M30, M31, M31, M30, M31, M30, M31, M31.slice(0, 7));\nvar NM28 = Object(helpers[\"k\" /* range */])(-28, 0);\nvar NM29 = Object(helpers[\"k\" /* range */])(-29, 0);\nvar NM30 = Object(helpers[\"k\" /* range */])(-30, 0);\nvar NM31 = Object(helpers[\"k\" /* range */])(-31, 0);\nvar NMDAY366MASK = __spreadArrays(NM31, NM29, NM31, NM30, NM31, NM30, NM31, NM31, NM30, NM31, NM30, NM31, NM31.slice(0, 7));\nvar NMDAY365MASK = __spreadArrays(NM31, NM28, NM31, NM30, NM31, NM30, NM31, NM31, NM30, NM31, NM30, NM31, NM31.slice(0, 7));\nvar M366RANGE = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366];\nvar M365RANGE = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];\nvar WDAYMASK = (function () {\n    var wdaymask = [];\n    for (var i = 0; i < 55; i++)\n        wdaymask = wdaymask.concat(Object(helpers[\"k\" /* range */])(7));\n    return wdaymask;\n})();\n\n\n// CONCATENATED MODULE: ./src/iterinfo/yearinfo.ts\n\n\n\n\nfunction rebuildYear(year, options) {\n    var firstyday = new Date(Date.UTC(year, 0, 1));\n    var yearlen = src_dateutil.isLeapYear(year) ? 366 : 365;\n    var nextyearlen = src_dateutil.isLeapYear(year + 1) ? 366 : 365;\n    var yearordinal = src_dateutil.toOrdinal(firstyday);\n    var yearweekday = src_dateutil.getWeekday(firstyday);\n    var result = __assign(__assign({ yearlen: yearlen,\n        nextyearlen: nextyearlen,\n        yearordinal: yearordinal,\n        yearweekday: yearweekday }, baseYearMasks(year)), { wnomask: null });\n    if (Object(helpers[\"b\" /* empty */])(options.byweekno)) {\n        return result;\n    }\n    result.wnomask = Object(helpers[\"l\" /* repeat */])(0, yearlen + 7);\n    var firstwkst;\n    var wyearlen;\n    var no1wkst = firstwkst = Object(helpers[\"j\" /* pymod */])(7 - yearweekday + options.wkst, 7);\n    if (no1wkst >= 4) {\n        no1wkst = 0;\n        // Number of days in the year, plus the days we got\n        // from last year.\n        wyearlen =\n            result.yearlen + Object(helpers[\"j\" /* pymod */])(yearweekday - options.wkst, 7);\n    }\n    else {\n        // Number of days in the year, minus the days we\n        // left in last year.\n        wyearlen = yearlen - no1wkst;\n    }\n    var div = Math.floor(wyearlen / 7);\n    var mod = Object(helpers[\"j\" /* pymod */])(wyearlen, 7);\n    var numweeks = Math.floor(div + mod / 4);\n    for (var j = 0; j < options.byweekno.length; j++) {\n        var n = options.byweekno[j];\n        if (n < 0) {\n            n += numweeks + 1;\n        }\n        if (!(n > 0 && n <= numweeks)) {\n            continue;\n        }\n        var i = void 0;\n        if (n > 1) {\n            i = no1wkst + (n - 1) * 7;\n            if (no1wkst !== firstwkst) {\n                i -= 7 - firstwkst;\n            }\n        }\n        else {\n            i = no1wkst;\n        }\n        for (var k = 0; k < 7; k++) {\n            result.wnomask[i] = 1;\n            i++;\n            if (result.wdaymask[i] === options.wkst)\n                break;\n        }\n    }\n    if (Object(helpers[\"c\" /* includes */])(options.byweekno, 1)) {\n        // Check week number 1 of next year as well\n        // orig-TODO : Check -numweeks for next year.\n        var i = no1wkst + numweeks * 7;\n        if (no1wkst !== firstwkst)\n            i -= 7 - firstwkst;\n        if (i < yearlen) {\n            // If week starts in next year, we\n            // don't care about it.\n            for (var j = 0; j < 7; j++) {\n                result.wnomask[i] = 1;\n                i += 1;\n                if (result.wdaymask[i] === options.wkst)\n                    break;\n            }\n        }\n    }\n    if (no1wkst) {\n        // Check last week number of last year as\n        // well. If no1wkst is 0, either the year\n        // started on week start, or week number 1\n        // got days from last year, so there are no\n        // days from last year's last week number in\n        // this year.\n        var lnumweeks = void 0;\n        if (!Object(helpers[\"c\" /* includes */])(options.byweekno, -1)) {\n            var lyearweekday = src_dateutil.getWeekday(new Date(Date.UTC(year - 1, 0, 1)));\n            var lno1wkst = Object(helpers[\"j\" /* pymod */])(7 - lyearweekday.valueOf() + options.wkst, 7);\n            var lyearlen = src_dateutil.isLeapYear(year - 1) ? 366 : 365;\n            var weekst = void 0;\n            if (lno1wkst >= 4) {\n                lno1wkst = 0;\n                weekst = lyearlen + Object(helpers[\"j\" /* pymod */])(lyearweekday - options.wkst, 7);\n            }\n            else {\n                weekst = yearlen - no1wkst;\n            }\n            lnumweeks = Math.floor(52 + Object(helpers[\"j\" /* pymod */])(weekst, 7) / 4);\n        }\n        else {\n            lnumweeks = -1;\n        }\n        if (Object(helpers[\"c\" /* includes */])(options.byweekno, lnumweeks)) {\n            for (var i = 0; i < no1wkst; i++)\n                result.wnomask[i] = 1;\n        }\n    }\n    return result;\n}\nfunction baseYearMasks(year) {\n    var yearlen = src_dateutil.isLeapYear(year) ? 366 : 365;\n    var firstyday = new Date(Date.UTC(year, 0, 1));\n    var wday = src_dateutil.getWeekday(firstyday);\n    if (yearlen === 365) {\n        return {\n            mmask: M365MASK,\n            mdaymask: MDAY365MASK,\n            nmdaymask: NMDAY365MASK,\n            wdaymask: WDAYMASK.slice(wday),\n            mrange: M365RANGE\n        };\n    }\n    return {\n        mmask: M366MASK,\n        mdaymask: MDAY366MASK,\n        nmdaymask: NMDAY366MASK,\n        wdaymask: WDAYMASK.slice(wday),\n        mrange: M366RANGE\n    };\n}\n\n// CONCATENATED MODULE: ./src/iterinfo/monthinfo.ts\n\n\nfunction rebuildMonth(year, month, yearlen, mrange, wdaymask, options) {\n    var result = {\n        lastyear: year,\n        lastmonth: month,\n        nwdaymask: []\n    };\n    var ranges = [];\n    if (options.freq === src_rrule.YEARLY) {\n        if (Object(helpers[\"b\" /* empty */])(options.bymonth)) {\n            ranges = [[0, yearlen]];\n        }\n        else {\n            for (var j = 0; j < options.bymonth.length; j++) {\n                month = options.bymonth[j];\n                ranges.push(mrange.slice(month - 1, month + 1));\n            }\n        }\n    }\n    else if (options.freq === src_rrule.MONTHLY) {\n        ranges = [mrange.slice(month - 1, month + 1)];\n    }\n    if (Object(helpers[\"b\" /* empty */])(ranges)) {\n        return result;\n    }\n    // Weekly frequency won't get here, so we may not\n    // care about cross-year weekly periods.\n    result.nwdaymask = Object(helpers[\"l\" /* repeat */])(0, yearlen);\n    for (var j = 0; j < ranges.length; j++) {\n        var rang = ranges[j];\n        var first = rang[0];\n        var last = rang[1] - 1;\n        for (var k = 0; k < options.bynweekday.length; k++) {\n            var i = void 0;\n            var _a = options.bynweekday[k], wday = _a[0], n = _a[1];\n            if (n < 0) {\n                i = last + (n + 1) * 7;\n                i -= Object(helpers[\"j\" /* pymod */])(wdaymask[i] - wday, 7);\n            }\n            else {\n                i = first + (n - 1) * 7;\n                i += Object(helpers[\"j\" /* pymod */])(7 - wdaymask[i] + wday, 7);\n            }\n            if (first <= i && i <= last)\n                result.nwdaymask[i] = 1;\n        }\n    }\n    return result;\n}\n\n// CONCATENATED MODULE: ./src/iterinfo/easter.ts\nfunction easter(y, offset) {\n    if (offset === void 0) { offset = 0; }\n    var a = y % 19;\n    var b = Math.floor(y / 100);\n    var c = y % 100;\n    var d = Math.floor(b / 4);\n    var e = b % 4;\n    var f = Math.floor((b + 8) / 25);\n    var g = Math.floor((b - f + 1) / 3);\n    var h = Math.floor(19 * a + b - d - g + 15) % 30;\n    var i = Math.floor(c / 4);\n    var k = c % 4;\n    var l = Math.floor(32 + 2 * e + 2 * i - h - k) % 7;\n    var m = Math.floor((a + 11 * h + 22 * l) / 451);\n    var month = Math.floor((h + l - 7 * m + 114) / 31);\n    var day = ((h + l - 7 * m + 114) % 31) + 1;\n    var date = Date.UTC(y, month - 1, day + offset);\n    var yearStart = Date.UTC(y, 0, 1);\n    return [Math.ceil((date - yearStart) / (1000 * 60 * 60 * 24))];\n}\n\n// CONCATENATED MODULE: ./src/iterinfo/index.ts\n\n\n\n\n\n\n\n// =============================================================================\n// Iterinfo\n// =============================================================================\nvar iterinfo_Iterinfo = /** @class */ (function () {\n    function Iterinfo(options) {\n        this.options = options;\n    }\n    Iterinfo.prototype.rebuild = function (year, month) {\n        var options = this.options;\n        if (year !== this.lastyear) {\n            this.yearinfo = rebuildYear(year, options);\n        }\n        if (Object(helpers[\"h\" /* notEmpty */])(options.bynweekday) &&\n            (month !== this.lastmonth || year !== this.lastyear)) {\n            var _a = this.yearinfo, yearlen = _a.yearlen, mrange = _a.mrange, wdaymask = _a.wdaymask;\n            this.monthinfo = rebuildMonth(year, month, yearlen, mrange, wdaymask, options);\n        }\n        if (Object(helpers[\"f\" /* isPresent */])(options.byeaster)) {\n            this.eastermask = easter(year, options.byeaster);\n        }\n    };\n    Object.defineProperty(Iterinfo.prototype, \"lastyear\", {\n        get: function () {\n            return this.monthinfo ? this.monthinfo.lastyear : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Iterinfo.prototype, \"lastmonth\", {\n        get: function () {\n            return this.monthinfo ? this.monthinfo.lastmonth : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Iterinfo.prototype, \"yearlen\", {\n        get: function () {\n            return this.yearinfo.yearlen;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Iterinfo.prototype, \"yearordinal\", {\n        get: function () {\n            return this.yearinfo.yearordinal;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Iterinfo.prototype, \"mrange\", {\n        get: function () {\n            return this.yearinfo.mrange;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Iterinfo.prototype, \"wdaymask\", {\n        get: function () {\n            return this.yearinfo.wdaymask;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Iterinfo.prototype, \"mmask\", {\n        get: function () {\n            return this.yearinfo.mmask;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Iterinfo.prototype, \"wnomask\", {\n        get: function () {\n            return this.yearinfo.wnomask;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Iterinfo.prototype, \"nwdaymask\", {\n        get: function () {\n            return this.monthinfo ? this.monthinfo.nwdaymask : [];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Iterinfo.prototype, \"nextyearlen\", {\n        get: function () {\n            return this.yearinfo.nextyearlen;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Iterinfo.prototype, \"mdaymask\", {\n        get: function () {\n            return this.yearinfo.mdaymask;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Iterinfo.prototype, \"nmdaymask\", {\n        get: function () {\n            return this.yearinfo.nmdaymask;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Iterinfo.prototype.ydayset = function () {\n        return [Object(helpers[\"k\" /* range */])(this.yearlen), 0, this.yearlen];\n    };\n    Iterinfo.prototype.mdayset = function (_, month, __) {\n        var start = this.mrange[month - 1];\n        var end = this.mrange[month];\n        var set = Object(helpers[\"l\" /* repeat */])(null, this.yearlen);\n        for (var i = start; i < end; i++)\n            set[i] = i;\n        return [set, start, end];\n    };\n    Iterinfo.prototype.wdayset = function (year, month, day) {\n        // We need to handle cross-year weeks here.\n        var set = Object(helpers[\"l\" /* repeat */])(null, this.yearlen + 7);\n        var i = src_dateutil.toOrdinal(new Date(Date.UTC(year, month - 1, day))) -\n            this.yearordinal;\n        var start = i;\n        for (var j = 0; j < 7; j++) {\n            set[i] = i;\n            ++i;\n            if (this.wdaymask[i] === this.options.wkst)\n                break;\n        }\n        return [set, start, i];\n    };\n    Iterinfo.prototype.ddayset = function (year, month, day) {\n        var set = Object(helpers[\"l\" /* repeat */])(null, this.yearlen);\n        var i = src_dateutil.toOrdinal(new Date(Date.UTC(year, month - 1, day))) -\n            this.yearordinal;\n        set[i] = i;\n        return [set, i, i + 1];\n    };\n    Iterinfo.prototype.htimeset = function (hour, _, second, millisecond) {\n        var _this = this;\n        var set = [];\n        this.options.byminute.forEach(function (minute) {\n            set = set.concat(_this.mtimeset(hour, minute, second, millisecond));\n        });\n        src_dateutil.sort(set);\n        return set;\n    };\n    Iterinfo.prototype.mtimeset = function (hour, minute, _, millisecond) {\n        var set = this.options.bysecond.map(function (second) {\n            return new Time(hour, minute, second, millisecond);\n        });\n        src_dateutil.sort(set);\n        return set;\n    };\n    Iterinfo.prototype.stimeset = function (hour, minute, second, millisecond) {\n        return [new Time(hour, minute, second, millisecond)];\n    };\n    Iterinfo.prototype.getdayset = function (freq) {\n        switch (freq) {\n            case Frequency.YEARLY: return this.ydayset.bind(this);\n            case Frequency.MONTHLY: return this.mdayset.bind(this);\n            case Frequency.WEEKLY: return this.wdayset.bind(this);\n            case Frequency.DAILY: return this.ddayset.bind(this);\n            default: return this.ddayset.bind(this);\n        }\n    };\n    Iterinfo.prototype.gettimeset = function (freq) {\n        switch (freq) {\n            case Frequency.HOURLY: return this.htimeset.bind(this);\n            case Frequency.MINUTELY: return this.mtimeset.bind(this);\n            case Frequency.SECONDLY: return this.stimeset.bind(this);\n        }\n    };\n    return Iterinfo;\n}());\n/* harmony default export */ var iterinfo = (iterinfo_Iterinfo);\n\n// CONCATENATED MODULE: ./src/iter/poslist.ts\n\n\nfunction buildPoslist(bysetpos, timeset, start, end, ii, dayset) {\n    var poslist = [];\n    for (var j = 0; j < bysetpos.length; j++) {\n        var daypos = void 0;\n        var timepos = void 0;\n        var pos = bysetpos[j];\n        if (pos < 0) {\n            daypos = Math.floor(pos / timeset.length);\n            timepos = Object(helpers[\"j\" /* pymod */])(pos, timeset.length);\n        }\n        else {\n            daypos = Math.floor((pos - 1) / timeset.length);\n            timepos = Object(helpers[\"j\" /* pymod */])(pos - 1, timeset.length);\n        }\n        var tmp = [];\n        for (var k = start; k < end; k++) {\n            var val = dayset[k];\n            if (!Object(helpers[\"f\" /* isPresent */])(val))\n                continue;\n            tmp.push(val);\n        }\n        var i = void 0;\n        if (daypos < 0) {\n            i = tmp.slice(daypos)[0];\n        }\n        else {\n            i = tmp[daypos];\n        }\n        var time = timeset[timepos];\n        var date = src_dateutil.fromOrdinal(ii.yearordinal + i);\n        var res = src_dateutil.combine(date, time);\n        // XXX: can this ever be in the array?\n        // - compare the actual date instead?\n        if (!Object(helpers[\"c\" /* includes */])(poslist, res))\n            poslist.push(res);\n    }\n    src_dateutil.sort(poslist);\n    return poslist;\n}\n\n// CONCATENATED MODULE: ./src/iter/index.ts\n\n\n\n\n\n\n\n\n\nfunction iter(iterResult, options) {\n    var dtstart = options.dtstart, freq = options.freq, interval = options.interval, until = options.until, bysetpos = options.bysetpos;\n    var count = options.count;\n    if (count === 0 || interval === 0) {\n        return emitResult(iterResult);\n    }\n    var counterDate = datetime_DateTime.fromDate(dtstart);\n    var ii = new iterinfo(options);\n    ii.rebuild(counterDate.year, counterDate.month);\n    var timeset = makeTimeset(ii, counterDate, options);\n    while (true) {\n        var _a = ii.getdayset(freq)(counterDate.year, counterDate.month, counterDate.day), dayset = _a[0], start = _a[1], end = _a[2];\n        var filtered = removeFilteredDays(dayset, start, end, ii, options);\n        if (Object(helpers[\"h\" /* notEmpty */])(bysetpos)) {\n            var poslist = buildPoslist(bysetpos, timeset, start, end, ii, dayset);\n            for (var j = 0; j < poslist.length; j++) {\n                var res = poslist[j];\n                if (until && res > until) {\n                    return emitResult(iterResult);\n                }\n                if (res >= dtstart) {\n                    var rezonedDate = rezoneIfNeeded(res, options);\n                    if (!iterResult.accept(rezonedDate)) {\n                        return emitResult(iterResult);\n                    }\n                    if (count) {\n                        --count;\n                        if (!count) {\n                            return emitResult(iterResult);\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            for (var j = start; j < end; j++) {\n                var currentDay = dayset[j];\n                if (!Object(helpers[\"f\" /* isPresent */])(currentDay)) {\n                    continue;\n                }\n                var date = src_dateutil.fromOrdinal(ii.yearordinal + currentDay);\n                for (var k = 0; k < timeset.length; k++) {\n                    var time = timeset[k];\n                    var res = src_dateutil.combine(date, time);\n                    if (until && res > until) {\n                        return emitResult(iterResult);\n                    }\n                    if (res >= dtstart) {\n                        var rezonedDate = rezoneIfNeeded(res, options);\n                        if (!iterResult.accept(rezonedDate)) {\n                            return emitResult(iterResult);\n                        }\n                        if (count) {\n                            --count;\n                            if (!count) {\n                                return emitResult(iterResult);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (options.interval === 0) {\n            return emitResult(iterResult);\n        }\n        // Handle frequency and interval\n        counterDate.add(options, filtered);\n        if (counterDate.year > src_dateutil.MAXYEAR) {\n            return emitResult(iterResult);\n        }\n        if (!freqIsDailyOrGreater(freq)) {\n            timeset = ii.gettimeset(freq)(counterDate.hour, counterDate.minute, counterDate.second, 0);\n        }\n        ii.rebuild(counterDate.year, counterDate.month);\n    }\n}\nfunction isFiltered(ii, currentDay, options) {\n    var bymonth = options.bymonth, byweekno = options.byweekno, byweekday = options.byweekday, byeaster = options.byeaster, bymonthday = options.bymonthday, bynmonthday = options.bynmonthday, byyearday = options.byyearday;\n    return ((Object(helpers[\"h\" /* notEmpty */])(bymonth) && !Object(helpers[\"c\" /* includes */])(bymonth, ii.mmask[currentDay])) ||\n        (Object(helpers[\"h\" /* notEmpty */])(byweekno) && !ii.wnomask[currentDay]) ||\n        (Object(helpers[\"h\" /* notEmpty */])(byweekday) && !Object(helpers[\"c\" /* includes */])(byweekday, ii.wdaymask[currentDay])) ||\n        (Object(helpers[\"h\" /* notEmpty */])(ii.nwdaymask) && !ii.nwdaymask[currentDay]) ||\n        (byeaster !== null && !Object(helpers[\"c\" /* includes */])(ii.eastermask, currentDay)) ||\n        ((Object(helpers[\"h\" /* notEmpty */])(bymonthday) || Object(helpers[\"h\" /* notEmpty */])(bynmonthday)) &&\n            !Object(helpers[\"c\" /* includes */])(bymonthday, ii.mdaymask[currentDay]) &&\n            !Object(helpers[\"c\" /* includes */])(bynmonthday, ii.nmdaymask[currentDay])) ||\n        (Object(helpers[\"h\" /* notEmpty */])(byyearday) &&\n            ((currentDay < ii.yearlen &&\n                !Object(helpers[\"c\" /* includes */])(byyearday, currentDay + 1) &&\n                !Object(helpers[\"c\" /* includes */])(byyearday, -ii.yearlen + currentDay)) ||\n                (currentDay >= ii.yearlen &&\n                    !Object(helpers[\"c\" /* includes */])(byyearday, currentDay + 1 - ii.yearlen) &&\n                    !Object(helpers[\"c\" /* includes */])(byyearday, -ii.nextyearlen + currentDay - ii.yearlen)))));\n}\nfunction rezoneIfNeeded(date, options) {\n    return new datewithzone_DateWithZone(date, options.tzid).rezonedDate();\n}\nfunction emitResult(iterResult) {\n    return iterResult.getValue();\n}\nfunction removeFilteredDays(dayset, start, end, ii, options) {\n    var filtered = false;\n    for (var dayCounter = start; dayCounter < end; dayCounter++) {\n        var currentDay = dayset[dayCounter];\n        filtered = isFiltered(ii, currentDay, options);\n        if (filtered)\n            dayset[currentDay] = null;\n    }\n    return filtered;\n}\nfunction makeTimeset(ii, counterDate, options) {\n    var freq = options.freq, byhour = options.byhour, byminute = options.byminute, bysecond = options.bysecond;\n    if (freqIsDailyOrGreater(freq)) {\n        return buildTimeset(options);\n    }\n    if ((freq >= src_rrule.HOURLY &&\n        Object(helpers[\"h\" /* notEmpty */])(byhour) &&\n        !Object(helpers[\"c\" /* includes */])(byhour, counterDate.hour)) ||\n        (freq >= src_rrule.MINUTELY &&\n            Object(helpers[\"h\" /* notEmpty */])(byminute) &&\n            !Object(helpers[\"c\" /* includes */])(byminute, counterDate.minute)) ||\n        (freq >= src_rrule.SECONDLY &&\n            Object(helpers[\"h\" /* notEmpty */])(bysecond) &&\n            !Object(helpers[\"c\" /* includes */])(bysecond, counterDate.second))) {\n        return [];\n    }\n    return ii.gettimeset(freq)(counterDate.hour, counterDate.minute, counterDate.second, counterDate.millisecond);\n}\n\n// CONCATENATED MODULE: ./src/rrule.ts\n\n\n\n\n\n\n\n\n\n\nvar getnlp = function () {\n    // Lazy, runtime import to avoid circular refs.\n    if (!getnlp._nlp) {\n        getnlp._nlp = __nested_webpack_require_9398__(4);\n    }\n    return getnlp._nlp;\n};\n// =============================================================================\n// RRule\n// =============================================================================\nvar Days = {\n    MO: new weekday[\"b\" /* Weekday */](0),\n    TU: new weekday[\"b\" /* Weekday */](1),\n    WE: new weekday[\"b\" /* Weekday */](2),\n    TH: new weekday[\"b\" /* Weekday */](3),\n    FR: new weekday[\"b\" /* Weekday */](4),\n    SA: new weekday[\"b\" /* Weekday */](5),\n    SU: new weekday[\"b\" /* Weekday */](6)\n};\nvar DEFAULT_OPTIONS = {\n    freq: Frequency.YEARLY,\n    dtstart: null,\n    interval: 1,\n    wkst: Days.MO,\n    count: null,\n    until: null,\n    tzid: null,\n    bysetpos: null,\n    bymonth: null,\n    bymonthday: null,\n    bynmonthday: null,\n    byyearday: null,\n    byweekno: null,\n    byweekday: null,\n    bynweekday: null,\n    byhour: null,\n    byminute: null,\n    bysecond: null,\n    byeaster: null\n};\nvar rrule_defaultKeys = Object.keys(DEFAULT_OPTIONS);\n/**\n *\n * @param {Options?} options - see <http://labix.org/python-dateutil/#head-cf004ee9a75592797e076752b2a889c10f445418>\n *        The only required option is `freq`, one of RRule.YEARLY, RRule.MONTHLY, ...\n * @constructor\n */\nvar rrule_RRule = /** @class */ (function () {\n    function RRule(options, noCache) {\n        if (options === void 0) { options = {}; }\n        if (noCache === void 0) { noCache = false; }\n        // RFC string\n        this._cache = noCache ? null : new cache_Cache();\n        // used by toString()\n        this.origOptions = initializeOptions(options);\n        var parsedOptions = parseOptions(options).parsedOptions;\n        this.options = parsedOptions;\n    }\n    RRule.parseText = function (text, language) {\n        return getnlp().parseText(text, language);\n    };\n    RRule.fromText = function (text, language) {\n        return getnlp().fromText(text, language);\n    };\n    RRule.fromString = function (str) {\n        return new RRule(RRule.parseString(str) || undefined);\n    };\n    RRule.prototype._iter = function (iterResult) {\n        return iter(iterResult, this.options);\n    };\n    RRule.prototype._cacheGet = function (what, args) {\n        if (!this._cache)\n            return false;\n        return this._cache._cacheGet(what, args);\n    };\n    RRule.prototype._cacheAdd = function (what, value, args) {\n        if (!this._cache)\n            return;\n        return this._cache._cacheAdd(what, value, args);\n    };\n    /**\n     * @param {Function} iterator - optional function that will be called\n     *                   on each date that is added. It can return false\n     *                   to stop the iteration.\n     * @return Array containing all recurrences.\n     */\n    RRule.prototype.all = function (iterator) {\n        if (iterator) {\n            return this._iter(new callbackiterresult('all', {}, iterator));\n        }\n        var result = this._cacheGet('all');\n        if (result === false) {\n            result = this._iter(new iterresult('all', {}));\n            this._cacheAdd('all', result);\n        }\n        return result;\n    };\n    /**\n     * Returns all the occurrences of the rrule between after and before.\n     * The inc keyword defines what happens if after and/or before are\n     * themselves occurrences. With inc == True, they will be included in the\n     * list, if they are found in the recurrence set.\n     * @return Array\n     */\n    RRule.prototype.between = function (after, before, inc, iterator) {\n        if (inc === void 0) { inc = false; }\n        if (!src_dateutil.isValidDate(after) || !src_dateutil.isValidDate(before))\n            throw new Error('Invalid date passed in to RRule.between');\n        var args = {\n            before: before,\n            after: after,\n            inc: inc\n        };\n        if (iterator) {\n            return this._iter(new callbackiterresult('between', args, iterator));\n        }\n        var result = this._cacheGet('between', args);\n        if (result === false) {\n            result = this._iter(new iterresult('between', args));\n            this._cacheAdd('between', result, args);\n        }\n        return result;\n    };\n    /**\n     * Returns the last recurrence before the given datetime instance.\n     * The inc keyword defines what happens if dt is an occurrence.\n     * With inc == True, if dt itself is an occurrence, it will be returned.\n     * @return Date or null\n     */\n    RRule.prototype.before = function (dt, inc) {\n        if (inc === void 0) { inc = false; }\n        if (!src_dateutil.isValidDate(dt))\n            throw new Error('Invalid date passed in to RRule.before');\n        var args = { dt: dt, inc: inc };\n        var result = this._cacheGet('before', args);\n        if (result === false) {\n            result = this._iter(new iterresult('before', args));\n            this._cacheAdd('before', result, args);\n        }\n        return result;\n    };\n    /**\n     * Returns the first recurrence after the given datetime instance.\n     * The inc keyword defines what happens if dt is an occurrence.\n     * With inc == True, if dt itself is an occurrence, it will be returned.\n     * @return Date or null\n     */\n    RRule.prototype.after = function (dt, inc) {\n        if (inc === void 0) { inc = false; }\n        if (!src_dateutil.isValidDate(dt))\n            throw new Error('Invalid date passed in to RRule.after');\n        var args = { dt: dt, inc: inc };\n        var result = this._cacheGet('after', args);\n        if (result === false) {\n            result = this._iter(new iterresult('after', args));\n            this._cacheAdd('after', result, args);\n        }\n        return result;\n    };\n    /**\n     * Returns the number of recurrences in this set. It will have go trough\n     * the whole recurrence, if this hasn't been done before.\n     */\n    RRule.prototype.count = function () {\n        return this.all().length;\n    };\n    /**\n     * Converts the rrule into its string representation\n     * @see <http://www.ietf.org/rfc/rfc2445.txt>\n     * @return String\n     */\n    RRule.prototype.toString = function () {\n        return optionsToString(this.origOptions);\n    };\n    /**\n     * Will convert all rules described in nlp:ToText\n     * to text.\n     */\n    RRule.prototype.toText = function (gettext, language, dateFormatter) {\n        return getnlp().toText(this, gettext, language, dateFormatter);\n    };\n    RRule.prototype.isFullyConvertibleToText = function () {\n        return getnlp().isFullyConvertible(this);\n    };\n    /**\n     * @return a RRule instance with the same freq and options\n     *          as this one (cache is not cloned)\n     */\n    RRule.prototype.clone = function () {\n        return new RRule(this.origOptions);\n    };\n    // RRule class 'constants'\n    RRule.FREQUENCIES = [\n        'YEARLY',\n        'MONTHLY',\n        'WEEKLY',\n        'DAILY',\n        'HOURLY',\n        'MINUTELY',\n        'SECONDLY'\n    ];\n    RRule.YEARLY = Frequency.YEARLY;\n    RRule.MONTHLY = Frequency.MONTHLY;\n    RRule.WEEKLY = Frequency.WEEKLY;\n    RRule.DAILY = Frequency.DAILY;\n    RRule.HOURLY = Frequency.HOURLY;\n    RRule.MINUTELY = Frequency.MINUTELY;\n    RRule.SECONDLY = Frequency.SECONDLY;\n    RRule.MO = Days.MO;\n    RRule.TU = Days.TU;\n    RRule.WE = Days.WE;\n    RRule.TH = Days.TH;\n    RRule.FR = Days.FR;\n    RRule.SA = Days.SA;\n    RRule.SU = Days.SU;\n    RRule.parseString = parseString;\n    RRule.optionsToString = optionsToString;\n    return RRule;\n}());\n/* harmony default export */ var src_rrule = (rrule_RRule);\n\n// CONCATENATED MODULE: ./src/iterset.ts\n\n\n\nfunction iterSet(iterResult, _rrule, _exrule, _rdate, _exdate, tzid) {\n    var _exdateHash = {};\n    var _accept = iterResult.accept;\n    function evalExdate(after, before) {\n        _exrule.forEach(function (rrule) {\n            rrule.between(after, before, true).forEach(function (date) {\n                _exdateHash[Number(date)] = true;\n            });\n        });\n    }\n    _exdate.forEach(function (date) {\n        var zonedDate = new datewithzone_DateWithZone(date, tzid).rezonedDate();\n        _exdateHash[Number(zonedDate)] = true;\n    });\n    iterResult.accept = function (date) {\n        var dt = Number(date);\n        if (isNaN(dt))\n            return _accept.call(this, date);\n        if (!_exdateHash[dt]) {\n            evalExdate(new Date(dt - 1), new Date(dt + 1));\n            if (!_exdateHash[dt]) {\n                _exdateHash[dt] = true;\n                return _accept.call(this, date);\n            }\n        }\n        return true;\n    };\n    if (iterResult.method === 'between') {\n        evalExdate(iterResult.args.after, iterResult.args.before);\n        iterResult.accept = function (date) {\n            var dt = Number(date);\n            if (!_exdateHash[dt]) {\n                _exdateHash[dt] = true;\n                return _accept.call(this, date);\n            }\n            return true;\n        };\n    }\n    for (var i = 0; i < _rdate.length; i++) {\n        var zonedDate = new datewithzone_DateWithZone(_rdate[i], tzid).rezonedDate();\n        if (!iterResult.accept(new Date(zonedDate.getTime())))\n            break;\n    }\n    _rrule.forEach(function (rrule) {\n        iter(iterResult, rrule.options);\n    });\n    var res = iterResult._result;\n    src_dateutil.sort(res);\n    switch (iterResult.method) {\n        case 'all':\n        case 'between':\n            return res;\n        case 'before':\n            return ((res.length && res[res.length - 1]) || null);\n        case 'after':\n        default:\n            return ((res.length && res[0]) || null);\n    }\n}\n\n// CONCATENATED MODULE: ./src/rrulestr.ts\n\n\n\n\n\n\n/**\n * RRuleStr\n *  To parse a set of rrule strings\n */\nvar rrulestr_DEFAULT_OPTIONS = {\n    dtstart: null,\n    cache: false,\n    unfold: false,\n    forceset: false,\n    compatible: false,\n    tzid: null\n};\nfunction parseInput(s, options) {\n    var rrulevals = [];\n    var rdatevals = [];\n    var exrulevals = [];\n    var exdatevals = [];\n    var _a = parseDtstart(s), dtstart = _a.dtstart, tzid = _a.tzid;\n    var lines = splitIntoLines(s, options.unfold);\n    lines.forEach(function (line) {\n        if (!line)\n            return;\n        var _a = breakDownLine(line), name = _a.name, parms = _a.parms, value = _a.value;\n        switch (name.toUpperCase()) {\n            case 'RRULE':\n                if (parms.length) {\n                    throw new Error(\"unsupported RRULE parm: \" + parms.join(','));\n                }\n                rrulevals.push(parseString(line));\n                break;\n            case 'RDATE':\n                var _b = /RDATE(?:;TZID=([^:=]+))?/i.exec(line), _ = _b[0], rdateTzid = _b[1];\n                if (rdateTzid && !tzid) {\n                    tzid = rdateTzid;\n                }\n                rdatevals = rdatevals.concat(parseRDate(value, parms));\n                break;\n            case 'EXRULE':\n                if (parms.length) {\n                    throw new Error(\"unsupported EXRULE parm: \" + parms.join(','));\n                }\n                exrulevals.push(parseString(value));\n                break;\n            case 'EXDATE':\n                exdatevals = exdatevals.concat(parseRDate(value, parms));\n                break;\n            case 'DTSTART':\n                break;\n            default:\n                throw new Error('unsupported property: ' + name);\n        }\n    });\n    return {\n        dtstart: dtstart,\n        tzid: tzid,\n        rrulevals: rrulevals,\n        rdatevals: rdatevals,\n        exrulevals: exrulevals,\n        exdatevals: exdatevals\n    };\n}\nfunction buildRule(s, options) {\n    var _a = parseInput(s, options), rrulevals = _a.rrulevals, rdatevals = _a.rdatevals, exrulevals = _a.exrulevals, exdatevals = _a.exdatevals, dtstart = _a.dtstart, tzid = _a.tzid;\n    var noCache = options.cache === false;\n    if (options.compatible) {\n        options.forceset = true;\n        options.unfold = true;\n    }\n    if (options.forceset ||\n        rrulevals.length > 1 ||\n        rdatevals.length ||\n        exrulevals.length ||\n        exdatevals.length) {\n        var rset_1 = new rruleset(noCache);\n        rset_1.dtstart(dtstart);\n        rset_1.tzid(tzid || undefined);\n        rrulevals.forEach(function (val) {\n            rset_1.rrule(new src_rrule(groomRruleOptions(val, dtstart, tzid), noCache));\n        });\n        rdatevals.forEach(function (date) {\n            rset_1.rdate(date);\n        });\n        exrulevals.forEach(function (val) {\n            rset_1.exrule(new src_rrule(groomRruleOptions(val, dtstart, tzid), noCache));\n        });\n        exdatevals.forEach(function (date) {\n            rset_1.exdate(date);\n        });\n        if (options.compatible && options.dtstart)\n            rset_1.rdate(dtstart);\n        return rset_1;\n    }\n    var val = rrulevals[0] || {};\n    return new src_rrule(groomRruleOptions(val, val.dtstart || options.dtstart || dtstart, val.tzid || options.tzid || tzid), noCache);\n}\nfunction rrulestr(s, options) {\n    if (options === void 0) { options = {}; }\n    return buildRule(s, rrulestr_initializeOptions(options));\n}\nfunction groomRruleOptions(val, dtstart, tzid) {\n    return __assign(__assign({}, val), { dtstart: dtstart,\n        tzid: tzid });\n}\nfunction rrulestr_initializeOptions(options) {\n    var invalid = [];\n    var keys = Object.keys(options);\n    var defaultKeys = Object.keys(rrulestr_DEFAULT_OPTIONS);\n    keys.forEach(function (key) {\n        if (!Object(helpers[\"c\" /* includes */])(defaultKeys, key))\n            invalid.push(key);\n    });\n    if (invalid.length) {\n        throw new Error('Invalid options: ' + invalid.join(', '));\n    }\n    return __assign(__assign({}, rrulestr_DEFAULT_OPTIONS), options);\n}\nfunction extractName(line) {\n    if (line.indexOf(':') === -1) {\n        return {\n            name: 'RRULE',\n            value: line\n        };\n    }\n    var _a = Object(helpers[\"m\" /* split */])(line, ':', 1), name = _a[0], value = _a[1];\n    return {\n        name: name,\n        value: value\n    };\n}\nfunction breakDownLine(line) {\n    var _a = extractName(line), name = _a.name, value = _a.value;\n    var parms = name.split(';');\n    if (!parms)\n        throw new Error('empty property name');\n    return {\n        name: parms[0].toUpperCase(),\n        parms: parms.slice(1),\n        value: value\n    };\n}\nfunction splitIntoLines(s, unfold) {\n    if (unfold === void 0) { unfold = false; }\n    s = s && s.trim();\n    if (!s)\n        throw new Error('Invalid empty string');\n    // More info about 'unfold' option\n    // Go head to http://www.ietf.org/rfc/rfc2445.txt\n    if (!unfold) {\n        return s.split(/\\s/);\n    }\n    var lines = s.split('\\n');\n    var i = 0;\n    while (i < lines.length) {\n        // TODO\n        var line = (lines[i] = lines[i].replace(/\\s+$/g, ''));\n        if (!line) {\n            lines.splice(i, 1);\n        }\n        else if (i > 0 && line[0] === ' ') {\n            lines[i - 1] += line.slice(1);\n            lines.splice(i, 1);\n        }\n        else {\n            i += 1;\n        }\n    }\n    return lines;\n}\nfunction validateDateParm(parms) {\n    parms.forEach(function (parm) {\n        if (!/(VALUE=DATE(-TIME)?)|(TZID=)/.test(parm)) {\n            throw new Error('unsupported RDATE/EXDATE parm: ' + parm);\n        }\n    });\n}\nfunction parseRDate(rdateval, parms) {\n    validateDateParm(parms);\n    return rdateval\n        .split(',')\n        .map(function (datestr) { return src_dateutil.untilStringToDate(datestr); });\n}\n\n// CONCATENATED MODULE: ./src/rruleset.ts\n\n\n\n\n\n\n\nfunction createGetterSetter(fieldName) {\n    var _this = this;\n    return function (field) {\n        if (field !== undefined) {\n            _this[\"_\" + fieldName] = field;\n        }\n        if (_this[\"_\" + fieldName] !== undefined) {\n            return _this[\"_\" + fieldName];\n        }\n        for (var i = 0; i < _this._rrule.length; i++) {\n            var field_1 = _this._rrule[i].origOptions[fieldName];\n            if (field_1) {\n                return field_1;\n            }\n        }\n    };\n}\nvar rruleset_RRuleSet = /** @class */ (function (_super) {\n    __extends(RRuleSet, _super);\n    /**\n     *\n     * @param {Boolean?} noCache\n     *  The same stratagy as RRule on cache, default to false\n     * @constructor\n     */\n    function RRuleSet(noCache) {\n        if (noCache === void 0) { noCache = false; }\n        var _this = _super.call(this, {}, noCache) || this;\n        _this.dtstart = createGetterSetter.apply(_this, ['dtstart']);\n        _this.tzid = createGetterSetter.apply(_this, ['tzid']);\n        _this._rrule = [];\n        _this._rdate = [];\n        _this._exrule = [];\n        _this._exdate = [];\n        return _this;\n    }\n    RRuleSet.prototype._iter = function (iterResult) {\n        return iterSet(iterResult, this._rrule, this._exrule, this._rdate, this._exdate, this.tzid());\n    };\n    /**\n     * Adds an RRule to the set\n     *\n     * @param {RRule}\n     */\n    RRuleSet.prototype.rrule = function (rrule) {\n        _addRule(rrule, this._rrule);\n    };\n    /**\n     * Adds an EXRULE to the set\n     *\n     * @param {RRule}\n     */\n    RRuleSet.prototype.exrule = function (rrule) {\n        _addRule(rrule, this._exrule);\n    };\n    /**\n     * Adds an RDate to the set\n     *\n     * @param {Date}\n     */\n    RRuleSet.prototype.rdate = function (date) {\n        _addDate(date, this._rdate);\n    };\n    /**\n     * Adds an EXDATE to the set\n     *\n     * @param {Date}\n     */\n    RRuleSet.prototype.exdate = function (date) {\n        _addDate(date, this._exdate);\n    };\n    /**\n     * Get list of included rrules in this recurrence set.\n     *\n     * @return List of rrules\n     */\n    RRuleSet.prototype.rrules = function () {\n        return this._rrule.map(function (e) { return rrulestr(e.toString()); });\n    };\n    /**\n     * Get list of excluded rrules in this recurrence set.\n     *\n     * @return List of exrules\n     */\n    RRuleSet.prototype.exrules = function () {\n        return this._exrule.map(function (e) { return rrulestr(e.toString()); });\n    };\n    /**\n     * Get list of included datetimes in this recurrence set.\n     *\n     * @return List of rdates\n     */\n    RRuleSet.prototype.rdates = function () {\n        return this._rdate.map(function (e) { return new Date(e.getTime()); });\n    };\n    /**\n     * Get list of included datetimes in this recurrence set.\n     *\n     * @return List of exdates\n     */\n    RRuleSet.prototype.exdates = function () {\n        return this._exdate.map(function (e) { return new Date(e.getTime()); });\n    };\n    RRuleSet.prototype.valueOf = function () {\n        var result = [];\n        if (!this._rrule.length && this._dtstart) {\n            result = result.concat(optionsToString({ dtstart: this._dtstart }));\n        }\n        this._rrule.forEach(function (rrule) {\n            result = result.concat(rrule.toString().split('\\n'));\n        });\n        this._exrule.forEach(function (exrule) {\n            result = result.concat(exrule.toString().split('\\n')\n                .map(function (line) { return line.replace(/^RRULE:/, 'EXRULE:'); })\n                .filter(function (line) { return !/^DTSTART/.test(line); }));\n        });\n        if (this._rdate.length) {\n            result.push(rdatesToString('RDATE', this._rdate, this.tzid()));\n        }\n        if (this._exdate.length) {\n            result.push(rdatesToString('EXDATE', this._exdate, this.tzid()));\n        }\n        return result;\n    };\n    /**\n     * to generate recurrence field such as:\n     *   DTSTART:19970902T010000Z\n     *   RRULE:FREQ=YEARLY;COUNT=2;BYDAY=TU\n     *   RRULE:FREQ=YEARLY;COUNT=1;BYDAY=TH\n     */\n    RRuleSet.prototype.toString = function () {\n        return this.valueOf().join('\\n');\n    };\n    /**\n     * Create a new RRuleSet Object completely base on current instance\n     */\n    RRuleSet.prototype.clone = function () {\n        var rrs = new RRuleSet(!!this._cache);\n        this._rrule.forEach(function (rule) { return rrs.rrule(rule.clone()); });\n        this._exrule.forEach(function (rule) { return rrs.exrule(rule.clone()); });\n        this._rdate.forEach(function (date) { return rrs.rdate(new Date(date.getTime())); });\n        this._exdate.forEach(function (date) { return rrs.exdate(new Date(date.getTime())); });\n        return rrs;\n    };\n    return RRuleSet;\n}(src_rrule));\n/* harmony default export */ var rruleset = (rruleset_RRuleSet);\nfunction _addRule(rrule, collection) {\n    if (!(rrule instanceof src_rrule)) {\n        throw new TypeError(String(rrule) + ' is not RRule instance');\n    }\n    if (!Object(helpers[\"c\" /* includes */])(collection.map(String), String(rrule))) {\n        collection.push(rrule);\n    }\n}\nfunction _addDate(date, collection) {\n    if (!(date instanceof Date)) {\n        throw new TypeError(String(date) + ' is not Date instance');\n    }\n    if (!Object(helpers[\"c\" /* includes */])(collection.map(Number), Number(date))) {\n        collection.push(date);\n        src_dateutil.sort(collection);\n    }\n}\nfunction rdatesToString(param, rdates, tzid) {\n    var isUTC = !tzid || tzid.toUpperCase() === 'UTC';\n    var header = isUTC ? param + \":\" : param + \";TZID=\" + tzid + \":\";\n    var dateString = rdates\n        .map(function (rdate) { return src_dateutil.timeToUntilString(rdate.valueOf(), isUTC); })\n        .join(',');\n    return \"\" + header + dateString;\n}\n\n// CONCATENATED MODULE: ./src/index.ts\n/* concated harmony reexport Frequency */__nested_webpack_require_9398__.d(__nested_webpack_exports__, \"Frequency\", function() { return Frequency; });\n/* concated harmony reexport Weekday */__nested_webpack_require_9398__.d(__nested_webpack_exports__, \"Weekday\", function() { return weekday[\"b\" /* Weekday */]; });\n/* concated harmony reexport RRule */__nested_webpack_require_9398__.d(__nested_webpack_exports__, \"RRule\", function() { return src_rrule; });\n/* concated harmony reexport RRuleSet */__nested_webpack_require_9398__.d(__nested_webpack_exports__, \"RRuleSet\", function() { return rruleset; });\n/* concated harmony reexport rrulestr */__nested_webpack_require_9398__.d(__nested_webpack_exports__, \"rrulestr\", function() { return rrulestr; });\n/*!\n * rrule.js - Library for working with recurrence rules for calendar dates.\n * https://github.com/jakubroztocil/rrule\n *\n * Copyright 2010, Jakub Roztocil and Lars Schoning\n * Licenced under the BSD licence.\n * https://github.com/jakubroztocil/rrule/blob/master/LICENCE\n *\n * Based on:\n * python-dateutil - Extensions to the standard Python datetime module.\n * Copyright (c) 2003-2011 - Gustavo Niemeyer <gustavo@niemeyer.net>\n * Copyright (c) 2012 - Tomi Pieviläinen <tomi.pievilainen@iki.fi>\n * https://github.com/jakubroztocil/rrule/blob/master/LICENCE\n *\n */\n\n\n\n\n\n// =============================================================================\n// Export\n// =============================================================================\n\n/* harmony default export */ var src = __nested_webpack_exports__[\"default\"] = (src_rrule);\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, __nested_webpack_exports__, __nested_webpack_require_102045__) {\n\n\"use strict\";\n/* harmony export (binding) */ __nested_webpack_require_102045__.d(__nested_webpack_exports__, \"a\", function() { return ALL_WEEKDAYS; });\n/* harmony export (binding) */ __nested_webpack_require_102045__.d(__nested_webpack_exports__, \"b\", function() { return Weekday; });\n// =============================================================================\n// Weekday\n// =============================================================================\nvar ALL_WEEKDAYS = ['MO', 'TU', 'WE', 'TH', 'FR', 'SA', 'SU'];\nvar Weekday = /** @class */ (function () {\n    function Weekday(weekday, n) {\n        if (n === 0)\n            throw new Error(\"Can't create weekday with n == 0\");\n        this.weekday = weekday;\n        this.n = n;\n    }\n    Weekday.fromStr = function (str) {\n        return new Weekday(ALL_WEEKDAYS.indexOf(str));\n    };\n    // __call__ - Cannot call the object directly, do it through\n    // e.g. RRule.TH.nth(-1) instead,\n    Weekday.prototype.nth = function (n) {\n        return this.n === n ? this : new Weekday(this.weekday, n);\n    };\n    // __eq__\n    Weekday.prototype.equals = function (other) {\n        return this.weekday === other.weekday && this.n === other.n;\n    };\n    // __repr__\n    Weekday.prototype.toString = function () {\n        var s = ALL_WEEKDAYS[this.weekday];\n        if (this.n)\n            s = (this.n > 0 ? '+' : '') + String(this.n) + s;\n        return s;\n    };\n    Weekday.prototype.getJsWeekday = function () {\n        return this.weekday === 6 ? 0 : this.weekday + 1;\n    };\n    return Weekday;\n}());\n\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__3__;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, __nested_webpack_exports__, __nested_webpack_require_103757__) {\n\n\"use strict\";\n__nested_webpack_require_103757__.r(__nested_webpack_exports__);\n\n// CONCATENATED MODULE: ./src/nlp/i18n.ts\n// =============================================================================\n// i18n\n// =============================================================================\nvar ENGLISH = {\n    dayNames: [\n        'Sunday', 'Monday', 'Tuesday', 'Wednesday',\n        'Thursday', 'Friday', 'Saturday'\n    ],\n    monthNames: [\n        'January', 'February', 'March', 'April', 'May',\n        'June', 'July', 'August', 'September', 'October',\n        'November', 'December'\n    ],\n    tokens: {\n        'SKIP': /^[ \\r\\n\\t]+|^\\.$/,\n        'number': /^[1-9][0-9]*/,\n        'numberAsText': /^(one|two|three)/i,\n        'every': /^every/i,\n        'day(s)': /^days?/i,\n        'weekday(s)': /^weekdays?/i,\n        'week(s)': /^weeks?/i,\n        'hour(s)': /^hours?/i,\n        'minute(s)': /^minutes?/i,\n        'month(s)': /^months?/i,\n        'year(s)': /^years?/i,\n        'on': /^(on|in)/i,\n        'at': /^(at)/i,\n        'the': /^the/i,\n        'first': /^first/i,\n        'second': /^second/i,\n        'third': /^third/i,\n        'nth': /^([1-9][0-9]*)(\\.|th|nd|rd|st)/i,\n        'last': /^last/i,\n        'for': /^for/i,\n        'time(s)': /^times?/i,\n        'until': /^(un)?til/i,\n        'monday': /^mo(n(day)?)?/i,\n        'tuesday': /^tu(e(s(day)?)?)?/i,\n        'wednesday': /^we(d(n(esday)?)?)?/i,\n        'thursday': /^th(u(r(sday)?)?)?/i,\n        'friday': /^fr(i(day)?)?/i,\n        'saturday': /^sa(t(urday)?)?/i,\n        'sunday': /^su(n(day)?)?/i,\n        'january': /^jan(uary)?/i,\n        'february': /^feb(ruary)?/i,\n        'march': /^mar(ch)?/i,\n        'april': /^apr(il)?/i,\n        'may': /^may/i,\n        'june': /^june?/i,\n        'july': /^july?/i,\n        'august': /^aug(ust)?/i,\n        'september': /^sep(t(ember)?)?/i,\n        'october': /^oct(ober)?/i,\n        'november': /^nov(ember)?/i,\n        'december': /^dec(ember)?/i,\n        'comma': /^(,\\s*|(and|or)\\s*)+/i\n    }\n};\n/* harmony default export */ var i18n = (ENGLISH);\n\n// EXTERNAL MODULE: ./src/index.ts + 22 modules\nvar src = __nested_webpack_require_103757__(1);\n\n// EXTERNAL MODULE: ./src/helpers.ts\nvar helpers = __nested_webpack_require_103757__(0);\n\n// CONCATENATED MODULE: ./src/nlp/totext.ts\n\n\n\n// =============================================================================\n// Helper functions\n// =============================================================================\n/**\n * Return true if a value is in an array\n */\nvar contains = function (arr, val) {\n    return arr.indexOf(val) !== -1;\n};\nvar defaultGetText = function (id) { return id.toString(); };\nvar defaultDateFormatter = function (year, month, day) { return month + \" \" + day + \", \" + year; };\n/**\n *\n * @param {RRule} rrule\n * Optional:\n * @param {Function} gettext function\n * @param {Object} language definition\n * @constructor\n */\nvar totext_ToText = /** @class */ (function () {\n    function ToText(rrule, gettext, language, dateFormatter) {\n        if (gettext === void 0) { gettext = defaultGetText; }\n        if (language === void 0) { language = i18n; }\n        if (dateFormatter === void 0) { dateFormatter = defaultDateFormatter; }\n        this.text = [];\n        this.language = language || i18n;\n        this.gettext = gettext;\n        this.dateFormatter = dateFormatter;\n        this.rrule = rrule;\n        this.options = rrule.options;\n        this.origOptions = rrule.origOptions;\n        if (this.origOptions.bymonthday) {\n            var bymonthday = [].concat(this.options.bymonthday);\n            var bynmonthday = [].concat(this.options.bynmonthday);\n            bymonthday.sort(function (a, b) { return a - b; });\n            bynmonthday.sort(function (a, b) { return b - a; });\n            // 1, 2, 3, .., -5, -4, -3, ..\n            this.bymonthday = bymonthday.concat(bynmonthday);\n            if (!this.bymonthday.length)\n                this.bymonthday = null;\n        }\n        if (Object(helpers[\"f\" /* isPresent */])(this.origOptions.byweekday)) {\n            var byweekday = !Object(helpers[\"d\" /* isArray */])(this.origOptions.byweekday)\n                ? [this.origOptions.byweekday]\n                : this.origOptions.byweekday;\n            var days = String(byweekday);\n            this.byweekday = {\n                allWeeks: byweekday.filter(function (weekday) {\n                    return !weekday.n;\n                }),\n                someWeeks: byweekday.filter(function (weekday) {\n                    return Boolean(weekday.n);\n                }),\n                isWeekdays: days.indexOf('MO') !== -1 &&\n                    days.indexOf('TU') !== -1 &&\n                    days.indexOf('WE') !== -1 &&\n                    days.indexOf('TH') !== -1 &&\n                    days.indexOf('FR') !== -1 &&\n                    days.indexOf('SA') === -1 &&\n                    days.indexOf('SU') === -1,\n                isEveryDay: days.indexOf('MO') !== -1 &&\n                    days.indexOf('TU') !== -1 &&\n                    days.indexOf('WE') !== -1 &&\n                    days.indexOf('TH') !== -1 &&\n                    days.indexOf('FR') !== -1 &&\n                    days.indexOf('SA') !== -1 &&\n                    days.indexOf('SU') !== -1\n            };\n            var sortWeekDays = function (a, b) {\n                return a.weekday - b.weekday;\n            };\n            this.byweekday.allWeeks.sort(sortWeekDays);\n            this.byweekday.someWeeks.sort(sortWeekDays);\n            if (!this.byweekday.allWeeks.length)\n                this.byweekday.allWeeks = null;\n            if (!this.byweekday.someWeeks.length)\n                this.byweekday.someWeeks = null;\n        }\n        else {\n            this.byweekday = null;\n        }\n    }\n    /**\n     * Test whether the rrule can be fully converted to text.\n     * @param {RRule} rrule\n     * @return {Boolean}\n     */\n    ToText.isFullyConvertible = function (rrule) {\n        var canConvert = true;\n        if (!(rrule.options.freq in ToText.IMPLEMENTED))\n            return false;\n        if (rrule.origOptions.until && rrule.origOptions.count)\n            return false;\n        for (var key in rrule.origOptions) {\n            if (contains(['dtstart', 'wkst', 'freq'], key))\n                return true;\n            if (!contains(ToText.IMPLEMENTED[rrule.options.freq], key))\n                return false;\n        }\n        return canConvert;\n    };\n    ToText.prototype.isFullyConvertible = function () {\n        return ToText.isFullyConvertible(this.rrule);\n    };\n    /**\n     * Perform the conversion. Only some of the frequencies are supported.\n     * If some of the rrule's options aren't supported, they'll\n     * be omitted from the output an \"(~ approximate)\" will be appended.\n     * @return {*}\n     */\n    ToText.prototype.toString = function () {\n        var gettext = this.gettext;\n        if (!(this.options.freq in ToText.IMPLEMENTED)) {\n            return gettext('RRule error: Unable to fully convert this rrule to text');\n        }\n        this.text = [gettext('every')];\n        // @ts-ignore\n        this[src[\"default\"].FREQUENCIES[this.options.freq]]();\n        if (this.options.until) {\n            this.add(gettext('until'));\n            var until = this.options.until;\n            this.add(this.dateFormatter(until.getUTCFullYear(), this.language.monthNames[until.getUTCMonth()], until.getUTCDate()));\n        }\n        else if (this.options.count) {\n            this.add(gettext('for'))\n                .add(this.options.count.toString())\n                .add(this.plural(this.options.count) ? gettext('times') : gettext('time'));\n        }\n        if (!this.isFullyConvertible())\n            this.add(gettext('(~ approximate)'));\n        return this.text.join('');\n    };\n    ToText.prototype.HOURLY = function () {\n        var gettext = this.gettext;\n        if (this.options.interval !== 1)\n            this.add(this.options.interval.toString());\n        this.add(this.plural(this.options.interval) ? gettext('hours') : gettext('hour'));\n    };\n    ToText.prototype.MINUTELY = function () {\n        var gettext = this.gettext;\n        if (this.options.interval !== 1)\n            this.add(this.options.interval.toString());\n        this.add(this.plural(this.options.interval)\n            ? gettext('minutes')\n            : gettext('minutes'));\n    };\n    ToText.prototype.DAILY = function () {\n        var gettext = this.gettext;\n        if (this.options.interval !== 1)\n            this.add(this.options.interval.toString());\n        if (this.byweekday && this.byweekday.isWeekdays) {\n            this.add(this.plural(this.options.interval)\n                ? gettext('weekdays')\n                : gettext('weekday'));\n        }\n        else {\n            this.add(this.plural(this.options.interval) ? gettext('days') : gettext('day'));\n        }\n        if (this.origOptions.bymonth) {\n            this.add(gettext('in'));\n            this._bymonth();\n        }\n        if (this.bymonthday) {\n            this._bymonthday();\n        }\n        else if (this.byweekday) {\n            this._byweekday();\n        }\n        else if (this.origOptions.byhour) {\n            this._byhour();\n        }\n    };\n    ToText.prototype.WEEKLY = function () {\n        var gettext = this.gettext;\n        if (this.options.interval !== 1) {\n            this.add(this.options.interval.toString()).add(this.plural(this.options.interval) ? gettext('weeks') : gettext('week'));\n        }\n        if (this.byweekday && this.byweekday.isWeekdays) {\n            if (this.options.interval === 1) {\n                this.add(this.plural(this.options.interval)\n                    ? gettext('weekdays')\n                    : gettext('weekday'));\n            }\n            else {\n                this.add(gettext('on')).add(gettext('weekdays'));\n            }\n        }\n        else if (this.byweekday && this.byweekday.isEveryDay) {\n            this.add(this.plural(this.options.interval) ? gettext('days') : gettext('day'));\n        }\n        else {\n            if (this.options.interval === 1)\n                this.add(gettext('week'));\n            if (this.origOptions.bymonth) {\n                this.add(gettext('in'));\n                this._bymonth();\n            }\n            if (this.bymonthday) {\n                this._bymonthday();\n            }\n            else if (this.byweekday) {\n                this._byweekday();\n            }\n        }\n    };\n    ToText.prototype.MONTHLY = function () {\n        var gettext = this.gettext;\n        if (this.origOptions.bymonth) {\n            if (this.options.interval !== 1) {\n                this.add(this.options.interval.toString()).add(gettext('months'));\n                if (this.plural(this.options.interval))\n                    this.add(gettext('in'));\n            }\n            else {\n                // this.add(gettext('MONTH'))\n            }\n            this._bymonth();\n        }\n        else {\n            if (this.options.interval !== 1)\n                this.add(this.options.interval.toString());\n            this.add(this.plural(this.options.interval)\n                ? gettext('months')\n                : gettext('month'));\n        }\n        if (this.bymonthday) {\n            this._bymonthday();\n        }\n        else if (this.byweekday && this.byweekday.isWeekdays) {\n            this.add(gettext('on')).add(gettext('weekdays'));\n        }\n        else if (this.byweekday) {\n            this._byweekday();\n        }\n    };\n    ToText.prototype.YEARLY = function () {\n        var gettext = this.gettext;\n        if (this.origOptions.bymonth) {\n            if (this.options.interval !== 1) {\n                this.add(this.options.interval.toString());\n                this.add(gettext('years'));\n            }\n            else {\n                // this.add(gettext('YEAR'))\n            }\n            this._bymonth();\n        }\n        else {\n            if (this.options.interval !== 1)\n                this.add(this.options.interval.toString());\n            this.add(this.plural(this.options.interval) ? gettext('years') : gettext('year'));\n        }\n        if (this.bymonthday) {\n            this._bymonthday();\n        }\n        else if (this.byweekday) {\n            this._byweekday();\n        }\n        if (this.options.byyearday) {\n            this.add(gettext('on the'))\n                .add(this.list(this.options.byyearday, this.nth, gettext('and')))\n                .add(gettext('day'));\n        }\n        if (this.options.byweekno) {\n            this.add(gettext('in'))\n                .add(this.plural(this.options.byweekno.length)\n                ? gettext('weeks')\n                : gettext('week'))\n                .add(this.list(this.options.byweekno, undefined, gettext('and')));\n        }\n    };\n    ToText.prototype._bymonthday = function () {\n        var gettext = this.gettext;\n        if (this.byweekday && this.byweekday.allWeeks) {\n            this.add(gettext('on'))\n                .add(this.list(this.byweekday.allWeeks, this.weekdaytext, gettext('or')))\n                .add(gettext('the'))\n                .add(this.list(this.bymonthday, this.nth, gettext('or')));\n        }\n        else {\n            this.add(gettext('on the')).add(this.list(this.bymonthday, this.nth, gettext('and')));\n        }\n        // this.add(gettext('DAY'))\n    };\n    ToText.prototype._byweekday = function () {\n        var gettext = this.gettext;\n        if (this.byweekday.allWeeks && !this.byweekday.isWeekdays) {\n            this.add(gettext('on')).add(this.list(this.byweekday.allWeeks, this.weekdaytext));\n        }\n        if (this.byweekday.someWeeks) {\n            if (this.byweekday.allWeeks)\n                this.add(gettext('and'));\n            this.add(gettext('on the')).add(this.list(this.byweekday.someWeeks, this.weekdaytext, gettext('and')));\n        }\n    };\n    ToText.prototype._byhour = function () {\n        var gettext = this.gettext;\n        this.add(gettext('at')).add(this.list(this.origOptions.byhour, undefined, gettext('and')));\n    };\n    ToText.prototype._bymonth = function () {\n        this.add(this.list(this.options.bymonth, this.monthtext, this.gettext('and')));\n    };\n    ToText.prototype.nth = function (n) {\n        n = parseInt(n.toString(), 10);\n        var nth;\n        var npos;\n        var gettext = this.gettext;\n        if (n === -1)\n            return gettext('last');\n        npos = Math.abs(n);\n        switch (npos) {\n            case 1:\n            case 21:\n            case 31:\n                nth = npos + gettext('st');\n                break;\n            case 2:\n            case 22:\n                nth = npos + gettext('nd');\n                break;\n            case 3:\n            case 23:\n                nth = npos + gettext('rd');\n                break;\n            default:\n                nth = npos + gettext('th');\n        }\n        return n < 0 ? nth + ' ' + gettext('last') : nth;\n    };\n    ToText.prototype.monthtext = function (m) {\n        return this.language.monthNames[m - 1];\n    };\n    ToText.prototype.weekdaytext = function (wday) {\n        var weekday = Object(helpers[\"e\" /* isNumber */])(wday) ? (wday + 1) % 7 : wday.getJsWeekday();\n        return ((wday.n ? this.nth(wday.n) + ' ' : '') + this.language.dayNames[weekday]);\n    };\n    ToText.prototype.plural = function (n) {\n        return n % 100 !== 1;\n    };\n    ToText.prototype.add = function (s) {\n        this.text.push(' ');\n        this.text.push(s);\n        return this;\n    };\n    ToText.prototype.list = function (arr, callback, finalDelim, delim) {\n        if (delim === void 0) { delim = ','; }\n        if (!Object(helpers[\"d\" /* isArray */])(arr)) {\n            arr = [arr];\n        }\n        var delimJoin = function (array, delimiter, finalDelimiter) {\n            var list = '';\n            for (var i = 0; i < array.length; i++) {\n                if (i !== 0) {\n                    if (i === array.length - 1) {\n                        list += ' ' + finalDelimiter + ' ';\n                    }\n                    else {\n                        list += delimiter + ' ';\n                    }\n                }\n                list += array[i];\n            }\n            return list;\n        };\n        callback =\n            callback ||\n                function (o) {\n                    return o.toString();\n                };\n        var self = this;\n        var realCallback = function (arg) {\n            return callback && callback.call(self, arg);\n        };\n        if (finalDelim) {\n            return delimJoin(arr.map(realCallback), delim, finalDelim);\n        }\n        else {\n            return arr.map(realCallback).join(delim + ' ');\n        }\n    };\n    return ToText;\n}());\n/* harmony default export */ var totext = (totext_ToText);\n\n// CONCATENATED MODULE: ./src/nlp/parsetext.ts\n\n\n// =============================================================================\n// Parser\n// =============================================================================\nvar Parser = /** @class */ (function () {\n    function Parser(rules) {\n        this.done = true;\n        this.rules = rules;\n    }\n    Parser.prototype.start = function (text) {\n        this.text = text;\n        this.done = false;\n        return this.nextSymbol();\n    };\n    Parser.prototype.isDone = function () {\n        return this.done && this.symbol === null;\n    };\n    Parser.prototype.nextSymbol = function () {\n        var best;\n        var bestSymbol;\n        var p = this;\n        this.symbol = null;\n        this.value = null;\n        do {\n            if (this.done)\n                return false;\n            var rule = void 0;\n            best = null;\n            for (var name_1 in this.rules) {\n                rule = this.rules[name_1];\n                var match = rule.exec(p.text);\n                if (match) {\n                    if (best === null || match[0].length > best[0].length) {\n                        best = match;\n                        bestSymbol = name_1;\n                    }\n                }\n            }\n            if (best != null) {\n                this.text = this.text.substr(best[0].length);\n                if (this.text === '')\n                    this.done = true;\n            }\n            if (best == null) {\n                this.done = true;\n                this.symbol = null;\n                this.value = null;\n                return;\n            }\n            // @ts-ignore\n        } while (bestSymbol === 'SKIP');\n        // @ts-ignore\n        this.symbol = bestSymbol;\n        this.value = best;\n        return true;\n    };\n    Parser.prototype.accept = function (name) {\n        if (this.symbol === name) {\n            if (this.value) {\n                var v = this.value;\n                this.nextSymbol();\n                return v;\n            }\n            this.nextSymbol();\n            return true;\n        }\n        return false;\n    };\n    Parser.prototype.acceptNumber = function () {\n        return this.accept('number');\n    };\n    Parser.prototype.expect = function (name) {\n        if (this.accept(name))\n            return true;\n        throw new Error('expected ' + name + ' but found ' + this.symbol);\n    };\n    return Parser;\n}());\nfunction parseText(text, language) {\n    if (language === void 0) { language = i18n; }\n    var options = {};\n    var ttr = new Parser(language.tokens);\n    if (!ttr.start(text))\n        return null;\n    S();\n    return options;\n    function S() {\n        // every [n]\n        ttr.expect('every');\n        var n = ttr.acceptNumber();\n        if (n)\n            options.interval = parseInt(n[0], 10);\n        if (ttr.isDone())\n            throw new Error('Unexpected end');\n        switch (ttr.symbol) {\n            case 'day(s)':\n                options.freq = src[\"default\"].DAILY;\n                if (ttr.nextSymbol()) {\n                    AT();\n                    F();\n                }\n                break;\n            // FIXME Note: every 2 weekdays != every two weeks on weekdays.\n            // DAILY on weekdays is not a valid rule\n            case 'weekday(s)':\n                options.freq = src[\"default\"].WEEKLY;\n                options.byweekday = [\n                    src[\"default\"].MO,\n                    src[\"default\"].TU,\n                    src[\"default\"].WE,\n                    src[\"default\"].TH,\n                    src[\"default\"].FR\n                ];\n                ttr.nextSymbol();\n                F();\n                break;\n            case 'week(s)':\n                options.freq = src[\"default\"].WEEKLY;\n                if (ttr.nextSymbol()) {\n                    ON();\n                    F();\n                }\n                break;\n            case 'hour(s)':\n                options.freq = src[\"default\"].HOURLY;\n                if (ttr.nextSymbol()) {\n                    ON();\n                    F();\n                }\n                break;\n            case 'minute(s)':\n                options.freq = src[\"default\"].MINUTELY;\n                if (ttr.nextSymbol()) {\n                    ON();\n                    F();\n                }\n                break;\n            case 'month(s)':\n                options.freq = src[\"default\"].MONTHLY;\n                if (ttr.nextSymbol()) {\n                    ON();\n                    F();\n                }\n                break;\n            case 'year(s)':\n                options.freq = src[\"default\"].YEARLY;\n                if (ttr.nextSymbol()) {\n                    ON();\n                    F();\n                }\n                break;\n            case 'monday':\n            case 'tuesday':\n            case 'wednesday':\n            case 'thursday':\n            case 'friday':\n            case 'saturday':\n            case 'sunday':\n                options.freq = src[\"default\"].WEEKLY;\n                var key = ttr.symbol.substr(0, 2).toUpperCase();\n                options.byweekday = [src[\"default\"][key]];\n                if (!ttr.nextSymbol())\n                    return;\n                // TODO check for duplicates\n                while (ttr.accept('comma')) {\n                    if (ttr.isDone())\n                        throw new Error('Unexpected end');\n                    var wkd = decodeWKD();\n                    if (!wkd) {\n                        throw new Error('Unexpected symbol ' + ttr.symbol + ', expected weekday');\n                    }\n                    // @ts-ignore\n                    options.byweekday.push(src[\"default\"][wkd]);\n                    ttr.nextSymbol();\n                }\n                MDAYs();\n                F();\n                break;\n            case 'january':\n            case 'february':\n            case 'march':\n            case 'april':\n            case 'may':\n            case 'june':\n            case 'july':\n            case 'august':\n            case 'september':\n            case 'october':\n            case 'november':\n            case 'december':\n                options.freq = src[\"default\"].YEARLY;\n                options.bymonth = [decodeM()];\n                if (!ttr.nextSymbol())\n                    return;\n                // TODO check for duplicates\n                while (ttr.accept('comma')) {\n                    if (ttr.isDone())\n                        throw new Error('Unexpected end');\n                    var m = decodeM();\n                    if (!m) {\n                        throw new Error('Unexpected symbol ' + ttr.symbol + ', expected month');\n                    }\n                    options.bymonth.push(m);\n                    ttr.nextSymbol();\n                }\n                ON();\n                F();\n                break;\n            default:\n                throw new Error('Unknown symbol');\n        }\n    }\n    function ON() {\n        var on = ttr.accept('on');\n        var the = ttr.accept('the');\n        if (!(on || the))\n            return;\n        do {\n            var nth = decodeNTH();\n            var wkd = decodeWKD();\n            var m = decodeM();\n            // nth <weekday> | <weekday>\n            if (nth) {\n                // ttr.nextSymbol()\n                if (wkd) {\n                    ttr.nextSymbol();\n                    if (!options.byweekday)\n                        options.byweekday = [];\n                    // @ts-ignore\n                    options.byweekday.push(src[\"default\"][wkd].nth(nth));\n                }\n                else {\n                    if (!options.bymonthday)\n                        options.bymonthday = [];\n                    // @ts-ignore\n                    options.bymonthday.push(nth);\n                    ttr.accept('day(s)');\n                }\n                // <weekday>\n            }\n            else if (wkd) {\n                ttr.nextSymbol();\n                if (!options.byweekday)\n                    options.byweekday = [];\n                // @ts-ignore\n                options.byweekday.push(src[\"default\"][wkd]);\n            }\n            else if (ttr.symbol === 'weekday(s)') {\n                ttr.nextSymbol();\n                if (!options.byweekday) {\n                    options.byweekday = [\n                        src[\"default\"].MO,\n                        src[\"default\"].TU,\n                        src[\"default\"].WE,\n                        src[\"default\"].TH,\n                        src[\"default\"].FR\n                    ];\n                }\n            }\n            else if (ttr.symbol === 'week(s)') {\n                ttr.nextSymbol();\n                var n = ttr.acceptNumber();\n                if (!n) {\n                    throw new Error('Unexpected symbol ' + ttr.symbol + ', expected week number');\n                }\n                options.byweekno = [parseInt(n[0], 10)];\n                while (ttr.accept('comma')) {\n                    n = ttr.acceptNumber();\n                    if (!n) {\n                        throw new Error('Unexpected symbol ' + ttr.symbol + '; expected monthday');\n                    }\n                    options.byweekno.push(parseInt(n[0], 10));\n                }\n            }\n            else if (m) {\n                ttr.nextSymbol();\n                if (!options.bymonth)\n                    options.bymonth = [];\n                // @ts-ignore\n                options.bymonth.push(m);\n            }\n            else {\n                return;\n            }\n        } while (ttr.accept('comma') || ttr.accept('the') || ttr.accept('on'));\n    }\n    function AT() {\n        var at = ttr.accept('at');\n        if (!at)\n            return;\n        do {\n            var n = ttr.acceptNumber();\n            if (!n) {\n                throw new Error('Unexpected symbol ' + ttr.symbol + ', expected hour');\n            }\n            options.byhour = [parseInt(n[0], 10)];\n            while (ttr.accept('comma')) {\n                n = ttr.acceptNumber();\n                if (!n) {\n                    throw new Error('Unexpected symbol ' + ttr.symbol + '; expected hour');\n                }\n                options.byhour.push(parseInt(n[0], 10));\n            }\n        } while (ttr.accept('comma') || ttr.accept('at'));\n    }\n    function decodeM() {\n        switch (ttr.symbol) {\n            case 'january':\n                return 1;\n            case 'february':\n                return 2;\n            case 'march':\n                return 3;\n            case 'april':\n                return 4;\n            case 'may':\n                return 5;\n            case 'june':\n                return 6;\n            case 'july':\n                return 7;\n            case 'august':\n                return 8;\n            case 'september':\n                return 9;\n            case 'october':\n                return 10;\n            case 'november':\n                return 11;\n            case 'december':\n                return 12;\n            default:\n                return false;\n        }\n    }\n    function decodeWKD() {\n        switch (ttr.symbol) {\n            case 'monday':\n            case 'tuesday':\n            case 'wednesday':\n            case 'thursday':\n            case 'friday':\n            case 'saturday':\n            case 'sunday':\n                return ttr.symbol.substr(0, 2).toUpperCase();\n            default:\n                return false;\n        }\n    }\n    function decodeNTH() {\n        switch (ttr.symbol) {\n            case 'last':\n                ttr.nextSymbol();\n                return -1;\n            case 'first':\n                ttr.nextSymbol();\n                return 1;\n            case 'second':\n                ttr.nextSymbol();\n                return ttr.accept('last') ? -2 : 2;\n            case 'third':\n                ttr.nextSymbol();\n                return ttr.accept('last') ? -3 : 3;\n            case 'nth':\n                var v = parseInt(ttr.value[1], 10);\n                if (v < -366 || v > 366)\n                    throw new Error('Nth out of range: ' + v);\n                ttr.nextSymbol();\n                return ttr.accept('last') ? -v : v;\n            default:\n                return false;\n        }\n    }\n    function MDAYs() {\n        ttr.accept('on');\n        ttr.accept('the');\n        var nth = decodeNTH();\n        if (!nth)\n            return;\n        options.bymonthday = [nth];\n        ttr.nextSymbol();\n        while (ttr.accept('comma')) {\n            nth = decodeNTH();\n            if (!nth) {\n                throw new Error('Unexpected symbol ' + ttr.symbol + '; expected monthday');\n            }\n            options.bymonthday.push(nth);\n            ttr.nextSymbol();\n        }\n    }\n    function F() {\n        if (ttr.symbol === 'until') {\n            var date = Date.parse(ttr.text);\n            if (!date)\n                throw new Error('Cannot parse until date:' + ttr.text);\n            options.until = new Date(date);\n        }\n        else if (ttr.accept('for')) {\n            options.count = parseInt(ttr.value[0], 10);\n            ttr.expect('number');\n            // ttr.expect('times')\n        }\n    }\n}\n\n// CONCATENATED MODULE: ./src/nlp/index.ts\n/* harmony export (binding) */ __nested_webpack_require_103757__.d(__nested_webpack_exports__, \"fromText\", function() { return fromText; });\n/* harmony export (binding) */ __nested_webpack_require_103757__.d(__nested_webpack_exports__, \"isFullyConvertible\", function() { return isFullyConvertible; });\n/* harmony export (binding) */ __nested_webpack_require_103757__.d(__nested_webpack_exports__, \"toText\", function() { return toText; });\n/* concated harmony reexport parseText */__nested_webpack_require_103757__.d(__nested_webpack_exports__, \"parseText\", function() { return parseText; });\n\n\n\n\n/*!\n* rrule.js - Library for working with recurrence rules for calendar dates.\n* https://github.com/jakubroztocil/rrule\n*\n* Copyright 2010, Jakub Roztocil and Lars Schoning\n* Licenced under the BSD licence.\n* https://github.com/jakubroztocil/rrule/blob/master/LICENCE\n*\n*/\n/**\n *\n * Implementation of RRule.fromText() and RRule::toText().\n *\n *\n * On the client side, this file needs to be included\n * when those functions are used.\n *\n */\n// =============================================================================\n// fromText\n// =============================================================================\n/**\n * Will be able to convert some of the below described rules from\n * text format to a rule object.\n *\n *\n * RULES\n *\n * Every ([n])\n *       day(s)\n *     | [weekday], ..., (and) [weekday]\n *     | weekday(s)\n *     | week(s)\n *     | month(s)\n *     | [month], ..., (and) [month]\n *     | year(s)\n *\n *\n * Plus 0, 1, or multiple of these:\n *\n * on [weekday], ..., (or) [weekday] the [monthday], [monthday], ... (or) [monthday]\n *\n * on [weekday], ..., (and) [weekday]\n *\n * on the [monthday], [monthday], ... (and) [monthday] (day of the month)\n *\n * on the [nth-weekday], ..., (and) [nth-weekday] (of the month/year)\n *\n *\n * Plus 0 or 1 of these:\n *\n * for [n] time(s)\n *\n * until [date]\n *\n * Plus (.)\n *\n *\n * Definitely no supported for parsing:\n *\n * (for year):\n *     in week(s) [n], ..., (and) [n]\n *\n *     on the [yearday], ..., (and) [n] day of the year\n *     on day [yearday], ..., (and) [n]\n *\n *\n * NON-TERMINALS\n *\n * [n]: 1, 2 ..., one, two, three ..\n * [month]: January, February, March, April, May, ... December\n * [weekday]: Monday, ... Sunday\n * [nth-weekday]: first [weekday], 2nd [weekday], ... last [weekday], ...\n * [monthday]: first, 1., 2., 1st, 2nd, second, ... 31st, last day, 2nd last day, ..\n * [date]:\n *     [month] (0-31(,) ([year])),\n *     (the) 0-31.(1-12.([year])),\n *     (the) 0-31/(1-12/([year])),\n *     [weekday]\n *\n * [year]: 0000, 0001, ... 01, 02, ..\n *\n * Definitely not supported for parsing:\n *\n * [yearday]: first, 1., 2., 1st, 2nd, second, ... 366th, last day, 2nd last day, ..\n *\n * @param {String} text\n * @return {Object, Boolean} the rule, or null.\n */\nvar fromText = function (text, language) {\n    if (language === void 0) { language = i18n; }\n    return new src[\"default\"](parseText(text, language) || undefined);\n};\nvar common = [\n    'count',\n    'until',\n    'interval',\n    'byweekday',\n    'bymonthday',\n    'bymonth'\n];\ntotext.IMPLEMENTED = [];\ntotext.IMPLEMENTED[src[\"default\"].HOURLY] = common;\ntotext.IMPLEMENTED[src[\"default\"].MINUTELY] = common;\ntotext.IMPLEMENTED[src[\"default\"].DAILY] = ['byhour'].concat(common);\ntotext.IMPLEMENTED[src[\"default\"].WEEKLY] = common;\ntotext.IMPLEMENTED[src[\"default\"].MONTHLY] = common;\ntotext.IMPLEMENTED[src[\"default\"].YEARLY] = ['byweekno', 'byyearday'].concat(common);\n// =============================================================================\n// Export\n// =============================================================================\nvar toText = function (rrule, gettext, language, dateFormatter) {\n    return new totext(rrule, gettext, language, dateFormatter).toString();\n};\nvar isFullyConvertible = totext.isFullyConvertible;\n\n\n\n/***/ })\n/******/ ]);\n});\n//# sourceMappingURL=rrule.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/rrule/dist/es5/rrule.js\n");

/***/ })

};
;